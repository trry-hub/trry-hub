import{_ as s,l as a,m as n,S as e}from"./chunks/framework.B9qehBrd.js";const p=JSON.parse('{"title":"介绍","description":"","frontmatter":{},"headers":[],"relativePath":"src/前端笔记/js学习记录/TypeScript/13. 模块.md","filePath":"src/前端笔记/js学习记录/TypeScript/13. 模块.md","lastUpdated":1683717698000}');const l=s({name:"src/前端笔记/js学习记录/TypeScript/13. 模块.md"},[["render",function(s,p,l,i,r,t){return n(),a("div",null,[...p[0]||(p[0]=[e('<h3 id="模块" tabindex="-1">模块 <a class="header-anchor" href="#模块" aria-label="Permalink to &quot;模块&quot;">​</a></h3><blockquote><p><strong>关于术语的一点说明:</strong> 请务必注意一点，TypeScript 1.5里术语名已经发生了变化。 “内部模块”现在称做“命名空间”。 “外部模块”现在则简称为“模块”，这是为了与<a href="http://www.ecma-international.org/ecma-262/6.0/" target="_blank" rel="noreferrer">ECMAScript 2015</a>里的术语保持一致，(也就是说 <code>module X {</code> 相当于现在推荐的写法 <code>namespace X {</code>)。</p></blockquote><h1 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h1><p>从ECMAScript 2015开始，JavaScript引入了模块的概念。TypeScript也沿用这个概念。</p><p>模块在其自身的作用域里执行，而不是在全局作用域里；这意味着定义在一个模块里的变量，函数，类等等在模块外部是不可见的，除非你明确地使用<a href="https://typescript.bootcss.com/modules.html#export" target="_blank" rel="noreferrer"><code>export</code>形式</a>之一导出它们。 相反，如果想使用其它模块导出的变量，函数，类，接口等的时候，你必须要导入它们，可以使用<a href="https://typescript.bootcss.com/modules.html#import" target="_blank" rel="noreferrer"><code>import</code>形式</a>之一。</p><p>模块是自声明的；两个模块之间的关系是通过在文件级别上使用imports和exports建立的。</p><p>模块使用模块加载器去导入其它的模块。 在运行时，模块加载器的作用是在执行此模块代码前去查找并执行这个模块的所有依赖。 大家最熟知的JavaScript模块加载器是服务于Node.js的<a href="https://en.wikipedia.org/wiki/CommonJS" target="_blank" rel="noreferrer">CommonJS</a>和服务于Web应用的<a href="http://requirejs.org/" target="_blank" rel="noreferrer">Require.js</a>。</p><p>TypeScript与ECMAScript 2015一样，任何包含顶级<code>import</code>或者<code>export</code>的文件都被当成一个模块。</p><h1 id="导出" tabindex="-1">导出 <a class="header-anchor" href="#导出" aria-label="Permalink to &quot;导出&quot;">​</a></h1><h2 id="导出声明" tabindex="-1">导出声明 <a class="header-anchor" href="#导出声明" aria-label="Permalink to &quot;导出声明&quot;">​</a></h2><p>任何声明（比如变量，函数，类，类型别名或接口）都能够通过添加<code>export</code>关键字来导出。</p><h5 id="validation-ts" tabindex="-1">Validation.ts <a class="header-anchor" href="#validation-ts" aria-label="Permalink to &quot;Validation.ts&quot;">​</a></h5><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>export interface StringValidator {</span></span>\n<span class="line"><span>    isAcceptable(s: string): boolean;</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h5 id="zipcodevalidator-ts" tabindex="-1">ZipCodeValidator.ts <a class="header-anchor" href="#zipcodevalidator-ts" aria-label="Permalink to &quot;ZipCodeValidator.ts&quot;">​</a></h5><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>export const numberRegexp = /^[0-9]+$/;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>export class ZipCodeValidator implements StringValidator {</span></span>\n<span class="line"><span>    isAcceptable(s: string) {</span></span>\n<span class="line"><span>        return s.length === 5 &amp;&amp; numberRegexp.test(s);</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="导出语句" tabindex="-1">导出语句 <a class="header-anchor" href="#导出语句" aria-label="Permalink to &quot;导出语句&quot;">​</a></h2><p>导出语句很便利，因为我们可能需要对导出的部分重命名，所以上面的例子可以这样改写：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>class ZipCodeValidator implements StringValidator {</span></span>\n<span class="line"><span>    isAcceptable(s: string) {</span></span>\n<span class="line"><span>        return s.length === 5 &amp;&amp; numberRegexp.test(s);</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span>export { ZipCodeValidator };</span></span>\n<span class="line"><span>export { ZipCodeValidator as mainValidator };</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="重新导出" tabindex="-1">重新导出 <a class="header-anchor" href="#重新导出" aria-label="Permalink to &quot;重新导出&quot;">​</a></h2><p>我们经常会去扩展其它模块，并且只导出那个模块的部分内容。 重新导出功能并不会在当前模块导入那个模块或定义一个新的局部变量。</p><h5 id="parseintbasedzipcodevalidator-ts" tabindex="-1">ParseIntBasedZipCodeValidator.ts <a class="header-anchor" href="#parseintbasedzipcodevalidator-ts" aria-label="Permalink to &quot;ParseIntBasedZipCodeValidator.ts&quot;">​</a></h5><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>export class ParseIntBasedZipCodeValidator {</span></span>\n<span class="line"><span>    isAcceptable(s: string) {</span></span>\n<span class="line"><span>        return s.length === 5 &amp;&amp; parseInt(s).toString() === s;</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>// 导出原先的验证器但做了重命名</span></span>\n<span class="line"><span>export {ZipCodeValidator as RegExpBasedZipCodeValidator} from &quot;./ZipCodeValidator&quot;;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>或者一个模块可以包裹多个模块，并把他们导出的内容联合在一起通过语法：<code>export * from &quot;module&quot;</code>。</p><h5 id="allvalidators-ts" tabindex="-1">AllValidators.ts <a class="header-anchor" href="#allvalidators-ts" aria-label="Permalink to &quot;AllValidators.ts&quot;">​</a></h5><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>export * from &quot;./StringValidator&quot;; // exports interface StringValidator</span></span>\n<span class="line"><span>export * from &quot;./LettersOnlyValidator&quot;; // exports class LettersOnlyValidator</span></span>\n<span class="line"><span>export * from &quot;./ZipCodeValidator&quot;;  // exports class ZipCodeValidator</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h1 id="导入" tabindex="-1">导入 <a class="header-anchor" href="#导入" aria-label="Permalink to &quot;导入&quot;">​</a></h1><p>模块的导入操作与导出一样简单。 可以使用以下<code>import</code>形式之一来导入其它模块中的导出内容。</p><h2 id="导入一个模块中的某个导出内容" tabindex="-1">导入一个模块中的某个导出内容 <a class="header-anchor" href="#导入一个模块中的某个导出内容" aria-label="Permalink to &quot;导入一个模块中的某个导出内容&quot;">​</a></h2><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>import { ZipCodeValidator } from &quot;./ZipCodeValidator&quot;;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>let myValidator = new ZipCodeValidator();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>可以对导入内容重命名</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>import { ZipCodeValidator as ZCV } from &quot;./ZipCodeValidator&quot;;</span></span>\n<span class="line"><span>let myValidator = new ZCV();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="将整个模块导入到一个变量-并通过它来访问模块的导出部分" tabindex="-1">将整个模块导入到一个变量，并通过它来访问模块的导出部分 <a class="header-anchor" href="#将整个模块导入到一个变量-并通过它来访问模块的导出部分" aria-label="Permalink to &quot;将整个模块导入到一个变量，并通过它来访问模块的导出部分&quot;">​</a></h2><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>import * as validator from &quot;./ZipCodeValidator&quot;;</span></span>\n<span class="line"><span>let myValidator = new validator.ZipCodeValidator();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="具有副作用的导入模块" tabindex="-1">具有副作用的导入模块 <a class="header-anchor" href="#具有副作用的导入模块" aria-label="Permalink to &quot;具有副作用的导入模块&quot;">​</a></h2><p>尽管不推荐这么做，一些模块会设置一些全局状态供其它模块使用。 这些模块可能没有任何的导出或用户根本就不关注它的导出。 使用下面的方法来导入这类模块：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>import &quot;./my-module.js&quot;;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h1 id="默认导出" tabindex="-1">默认导出 <a class="header-anchor" href="#默认导出" aria-label="Permalink to &quot;默认导出&quot;">​</a></h1><p>每个模块都可以有一个<code>default</code>导出。 默认导出使用<code>default</code>关键字标记；并且一个模块只能够有一个<code>default</code>导出。 需要使用一种特殊的导入形式来导入<code>default</code>导出。</p><p><code>default</code>导出十分便利。 比如，像JQuery这样的类库可能有一个默认导出<code>jQuery</code>或<code>$</code>，并且我们基本上也会使用同样的名字<code>jQuery</code>或<code>$</code>导出JQuery。</p><h5 id="jquery-d-ts" tabindex="-1">JQuery.d.ts <a class="header-anchor" href="#jquery-d-ts" aria-label="Permalink to &quot;JQuery.d.ts&quot;">​</a></h5><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>declare let $: JQuery;</span></span>\n<span class="line"><span>export default $;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h5 id="app-ts" tabindex="-1">App.ts <a class="header-anchor" href="#app-ts" aria-label="Permalink to &quot;App.ts&quot;">​</a></h5><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>import $ from &quot;JQuery&quot;;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>$(&quot;button.continue&quot;).html( &quot;Next Step...&quot; );</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>类和函数声明可以直接被标记为默认导出。 标记为默认导出的类和函数的名字是可以省略的。</p><h5 id="zipcodevalidator-ts-1" tabindex="-1">ZipCodeValidator.ts <a class="header-anchor" href="#zipcodevalidator-ts-1" aria-label="Permalink to &quot;ZipCodeValidator.ts&quot;">​</a></h5><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>export default class ZipCodeValidator {</span></span>\n<span class="line"><span>    static numberRegexp = /^[0-9]+$/;</span></span>\n<span class="line"><span>    isAcceptable(s: string) {</span></span>\n<span class="line"><span>        return s.length === 5 &amp;&amp; ZipCodeValidator.numberRegexp.test(s);</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h5 id="test-ts" tabindex="-1">Test.ts <a class="header-anchor" href="#test-ts" aria-label="Permalink to &quot;Test.ts&quot;">​</a></h5><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>import validator from &quot;./ZipCodeValidator&quot;;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>let myValidator = new validator();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>或者</p><h5 id="staticzipcodevalidator-ts" tabindex="-1">StaticZipCodeValidator.ts <a class="header-anchor" href="#staticzipcodevalidator-ts" aria-label="Permalink to &quot;StaticZipCodeValidator.ts&quot;">​</a></h5><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>const numberRegexp = /^[0-9]+$/;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>export default function (s: string) {</span></span>\n<span class="line"><span>    return s.length === 5 &amp;&amp; numberRegexp.test(s);</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h5 id="test-ts-1" tabindex="-1">Test.ts <a class="header-anchor" href="#test-ts-1" aria-label="Permalink to &quot;Test.ts&quot;">​</a></h5><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>import validate from &quot;./StaticZipCodeValidator&quot;;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>let strings = [&quot;Hello&quot;, &quot;98052&quot;, &quot;101&quot;];</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>// Use function validate</span></span>\n<span class="line"><span>strings.forEach(s =&gt; {</span></span>\n<span class="line"><span>  console.log(`&quot;${s}&quot; ${validate(s) ? &quot; matches&quot; : &quot; does not match&quot;}`);</span></span>\n<span class="line"><span>});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><code>default</code>导出也可以是一个值</p><h5 id="onetwothree-ts" tabindex="-1">OneTwoThree.ts <a class="header-anchor" href="#onetwothree-ts" aria-label="Permalink to &quot;OneTwoThree.ts&quot;">​</a></h5><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>export default &quot;123&quot;;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h5 id="log-ts" tabindex="-1">Log.ts <a class="header-anchor" href="#log-ts" aria-label="Permalink to &quot;Log.ts&quot;">​</a></h5><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>import num from &quot;./OneTwoThree&quot;;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>console.log(num); // &quot;123&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h1 id="export-和-import-require" tabindex="-1"><code>export =</code> 和 <code>import = require()</code> <a class="header-anchor" href="#export-和-import-require" aria-label="Permalink to &quot;`export =` 和 `import = require()`&quot;">​</a></h1><p>CommonJS和AMD都有一个<code>exports</code>对象的概念，它包含了一个模块的所有导出内容。</p><p>它们也支持把<code>exports</code>替换为一个自定义对象。 默认导出就好比这样一个功能；然而，它们却并不相互兼容。 TypeScript模块支持<code>export =</code>语法以支持传统的CommonJS和AMD的工作流模型。</p><p><code>export =</code>语法定义一个模块的导出对象。 它可以是类，接口，命名空间，函数或枚举。</p><p>若要导入一个使用了<code>export =</code>的模块时，必须使用TypeScript提供的特定语法<code>import module = require(&quot;module&quot;)</code>。</p><h5 id="zipcodevalidator-ts-2" tabindex="-1">ZipCodeValidator.ts <a class="header-anchor" href="#zipcodevalidator-ts-2" aria-label="Permalink to &quot;ZipCodeValidator.ts&quot;">​</a></h5><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>let numberRegexp = /^[0-9]+$/;</span></span>\n<span class="line"><span>class ZipCodeValidator {</span></span>\n<span class="line"><span>    isAcceptable(s: string) {</span></span>\n<span class="line"><span>        return s.length === 5 &amp;&amp; numberRegexp.test(s);</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span>export = ZipCodeValidator;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h5 id="test-ts-2" tabindex="-1">Test.ts <a class="header-anchor" href="#test-ts-2" aria-label="Permalink to &quot;Test.ts&quot;">​</a></h5><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>import zip = require(&quot;./ZipCodeValidator&quot;);</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>// Some samples to try</span></span>\n<span class="line"><span>let strings = [&quot;Hello&quot;, &quot;98052&quot;, &quot;101&quot;];</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>// Validators to use</span></span>\n<span class="line"><span>let validator = new zip();</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>// Show whether each string passed each validator</span></span>\n<span class="line"><span>strings.forEach(s =&gt; {</span></span>\n<span class="line"><span>  console.log(`&quot;${ s }&quot; - ${ validator.isAcceptable(s) ? &quot;matches&quot; : &quot;does not match&quot; }`);</span></span>\n<span class="line"><span>});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h1 id="生成模块代码" tabindex="-1">生成模块代码 <a class="header-anchor" href="#生成模块代码" aria-label="Permalink to &quot;生成模块代码&quot;">​</a></h1><p>根据编译时指定的模块目标参数，编译器会生成相应的供Node.js (<a href="http://wiki.commonjs.org/wiki/CommonJS" target="_blank" rel="noreferrer">CommonJS</a>)，Require.js (<a href="https://github.com/amdjs/amdjs-api/wiki/AMD" target="_blank" rel="noreferrer">AMD</a>)，isomorphic (<a href="https://github.com/umdjs/umd" target="_blank" rel="noreferrer">UMD</a>), <a href="https://github.com/systemjs/systemjs" target="_blank" rel="noreferrer">SystemJS</a>或<a href="http://www.ecma-international.org/ecma-262/6.0/#sec-modules" target="_blank" rel="noreferrer">ECMAScript 2015 native modules</a> (ES6)模块加载系统使用的代码。 想要了解生成代码中<code>define</code>，<code>require</code> 和 <code>register</code>的意义，请参考相应模块加载器的文档。</p><p>下面的例子说明了导入导出语句里使用的名字是怎么转换为相应的模块加载器代码的。</p><h5 id="simplemodule-ts" tabindex="-1">SimpleModule.ts <a class="header-anchor" href="#simplemodule-ts" aria-label="Permalink to &quot;SimpleModule.ts&quot;">​</a></h5><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>import m = require(&quot;mod&quot;);</span></span>\n<span class="line"><span>export let t = m.something + 1;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h5 id="amd-requirejs-simplemodule-js" tabindex="-1">AMD / RequireJS SimpleModule.js <a class="header-anchor" href="#amd-requirejs-simplemodule-js" aria-label="Permalink to &quot;AMD / RequireJS SimpleModule.js&quot;">​</a></h5><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>define([&quot;require&quot;, &quot;exports&quot;, &quot;./mod&quot;], function (require, exports, mod_1) {</span></span>\n<span class="line"><span>    exports.t = mod_1.something + 1;</span></span>\n<span class="line"><span>});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h5 id="commonjs-node-simplemodule-js" tabindex="-1">CommonJS / Node SimpleModule.js <a class="header-anchor" href="#commonjs-node-simplemodule-js" aria-label="Permalink to &quot;CommonJS / Node SimpleModule.js&quot;">​</a></h5><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>let mod_1 = require(&quot;./mod&quot;);</span></span>\n<span class="line"><span>exports.t = mod_1.something + 1;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h5 id="umd-simplemodule-js" tabindex="-1">UMD SimpleModule.js <a class="header-anchor" href="#umd-simplemodule-js" aria-label="Permalink to &quot;UMD SimpleModule.js&quot;">​</a></h5><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>(function (factory) {</span></span>\n<span class="line"><span>    if (typeof module === &quot;object&quot; &amp;&amp; typeof module.exports === &quot;object&quot;) {</span></span>\n<span class="line"><span>        let v = factory(require, exports); if (v !== undefined) module.exports = v;</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>    else if (typeof define === &quot;function&quot; &amp;&amp; define.amd) {</span></span>\n<span class="line"><span>        define([&quot;require&quot;, &quot;exports&quot;, &quot;./mod&quot;], factory);</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>})(function (require, exports) {</span></span>\n<span class="line"><span>    let mod_1 = require(&quot;./mod&quot;);</span></span>\n<span class="line"><span>    exports.t = mod_1.something + 1;</span></span>\n<span class="line"><span>});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h5 id="system-simplemodule-js" tabindex="-1">System SimpleModule.js <a class="header-anchor" href="#system-simplemodule-js" aria-label="Permalink to &quot;System SimpleModule.js&quot;">​</a></h5><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>System.register([&quot;./mod&quot;], function(exports_1) {</span></span>\n<span class="line"><span>    let mod_1;</span></span>\n<span class="line"><span>    let t;</span></span>\n<span class="line"><span>    return {</span></span>\n<span class="line"><span>        setters:[</span></span>\n<span class="line"><span>            function (mod_1_1) {</span></span>\n<span class="line"><span>                mod_1 = mod_1_1;</span></span>\n<span class="line"><span>            }],</span></span>\n<span class="line"><span>        execute: function() {</span></span>\n<span class="line"><span>            exports_1(&quot;t&quot;, t = mod_1.something + 1);</span></span>\n<span class="line"><span>        }</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h5 id="native-ecmascript-2015-modules-simplemodule-js" tabindex="-1">Native ECMAScript 2015 modules SimpleModule.js <a class="header-anchor" href="#native-ecmascript-2015-modules-simplemodule-js" aria-label="Permalink to &quot;Native ECMAScript 2015 modules SimpleModule.js&quot;">​</a></h5><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>import { something } from &quot;./mod&quot;;</span></span>\n<span class="line"><span>export let t = something + 1;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h1 id="简单示例" tabindex="-1">简单示例 <a class="header-anchor" href="#简单示例" aria-label="Permalink to &quot;简单示例&quot;">​</a></h1><p>下面我们来整理一下前面的验证器实现，每个模块只有一个命名的导出。</p><p>为了编译，我们必需要在命令行上指定一个模块目标。对于Node.js来说，使用<code>--module commonjs</code>； 对于Require.js来说，使用``–module amd`。比如：</p><div class="language-Shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tsc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --module</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commonjs</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Test.ts</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>编译完成后，每个模块会生成一个单独的<code>.js</code>文件。 好比使用了reference标签，编译器会根据<code>import</code>语句编译相应的文件。</p><h5 id="validation-ts-1" tabindex="-1">Validation.ts <a class="header-anchor" href="#validation-ts-1" aria-label="Permalink to &quot;Validation.ts&quot;">​</a></h5><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>export interface StringValidator {</span></span>\n<span class="line"><span>    isAcceptable(s: string): boolean;</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h5 id="lettersonlyvalidator-ts" tabindex="-1">LettersOnlyValidator.ts <a class="header-anchor" href="#lettersonlyvalidator-ts" aria-label="Permalink to &quot;LettersOnlyValidator.ts&quot;">​</a></h5><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>import { StringValidator } from &quot;./Validation&quot;;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>const lettersRegexp = /^[A-Za-z]+$/;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>export class LettersOnlyValidator implements StringValidator {</span></span>\n<span class="line"><span>    isAcceptable(s: string) {</span></span>\n<span class="line"><span>        return lettersRegexp.test(s);</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h5 id="zipcodevalidator-ts-3" tabindex="-1">ZipCodeValidator.ts <a class="header-anchor" href="#zipcodevalidator-ts-3" aria-label="Permalink to &quot;ZipCodeValidator.ts&quot;">​</a></h5><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>import { StringValidator } from &quot;./Validation&quot;;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>const numberRegexp = /^[0-9]+$/;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>export class ZipCodeValidator implements StringValidator {</span></span>\n<span class="line"><span>    isAcceptable(s: string) {</span></span>\n<span class="line"><span>        return s.length === 5 &amp;&amp; numberRegexp.test(s);</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h5 id="test-ts-3" tabindex="-1">Test.ts <a class="header-anchor" href="#test-ts-3" aria-label="Permalink to &quot;Test.ts&quot;">​</a></h5><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>import { StringValidator } from &quot;./Validation&quot;;</span></span>\n<span class="line"><span>import { ZipCodeValidator } from &quot;./ZipCodeValidator&quot;;</span></span>\n<span class="line"><span>import { LettersOnlyValidator } from &quot;./LettersOnlyValidator&quot;;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>// Some samples to try</span></span>\n<span class="line"><span>let strings = [&quot;Hello&quot;, &quot;98052&quot;, &quot;101&quot;];</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>// Validators to use</span></span>\n<span class="line"><span>let validators: { [s: string]: StringValidator; } = {};</span></span>\n<span class="line"><span>validators[&quot;ZIP code&quot;] = new ZipCodeValidator();</span></span>\n<span class="line"><span>validators[&quot;Letters only&quot;] = new LettersOnlyValidator();</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>// Show whether each string passed each validator</span></span>\n<span class="line"><span>strings.forEach(s =&gt; {</span></span>\n<span class="line"><span>    for (let name in validators) {</span></span>\n<span class="line"><span>        console.log(`&quot;${ s }&quot; - ${ validators[name].isAcceptable(s) ? &quot;matches&quot; : &quot;does not match&quot; } ${ name }`);</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h1 id="可选的模块加载和其它高级加载场景" tabindex="-1">可选的模块加载和其它高级加载场景 <a class="header-anchor" href="#可选的模块加载和其它高级加载场景" aria-label="Permalink to &quot;可选的模块加载和其它高级加载场景&quot;">​</a></h1><p>有时候，你只想在某种条件下才加载某个模块。 在TypeScript里，使用下面的方式来实现它和其它的高级加载场景，我们可以直接调用模块加载器并且可以保证类型完全。</p><p>编译器会检测是否每个模块都会在生成的JavaScript中用到。 如果一个模块标识符只在类型注解部分使用，并且完全没有在表达式中使用时，就不会生成<code>require</code>这个模块的代码。 省略掉没有用到的引用对性能提升是很有益的，并同时提供了选择性加载模块的能力。</p><p>这种模式的核心是<code>import id = require(&quot;...&quot;)</code>语句可以让我们访问模块导出的类型。 模块加载器会被动态调用（通过<code>require</code>），就像下面<code>if</code>代码块里那样。 它利用了省略引用的优化，所以模块只在被需要时加载。 为了让这个模块工作，一定要注意<code>import</code>定义的标识符只能在表示类型处使用（不能在会转换成JavaScript的地方）。</p><p>为了确保类型安全性，我们可以使用<code>typeof</code>关键字。 <code>typeof</code>关键字，当在表示类型的地方使用时，会得出一个类型值，这里就表示模块的类型。</p><h5 id="示例-node-js里的动态模块加载" tabindex="-1">示例：Node.js里的动态模块加载 <a class="header-anchor" href="#示例-node-js里的动态模块加载" aria-label="Permalink to &quot;示例：Node.js里的动态模块加载&quot;">​</a></h5><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>declare function require(moduleName: string): any;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>import { ZipCodeValidator as Zip } from &quot;./ZipCodeValidator&quot;;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>if (needZipValidation) {</span></span>\n<span class="line"><span>    let ZipCodeValidator: typeof Zip = require(&quot;./ZipCodeValidator&quot;);</span></span>\n<span class="line"><span>    let validator = new ZipCodeValidator();</span></span>\n<span class="line"><span>    if (validator.isAcceptable(&quot;...&quot;)) { /* ... */ }</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h5 id="示例-require-js里的动态模块加载" tabindex="-1">示例：require.js里的动态模块加载 <a class="header-anchor" href="#示例-require-js里的动态模块加载" aria-label="Permalink to &quot;示例：require.js里的动态模块加载&quot;">​</a></h5><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>declare function require(moduleNames: string[], onLoad: (...args: any[]) =&gt; void): void;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>import  * as Zip from &quot;./ZipCodeValidator&quot;;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>if (needZipValidation) {</span></span>\n<span class="line"><span>    require([&quot;./ZipCodeValidator&quot;], (ZipCodeValidator: typeof Zip) =&gt; {</span></span>\n<span class="line"><span>        let validator = new ZipCodeValidator.ZipCodeValidator();</span></span>\n<span class="line"><span>        if (validator.isAcceptable(&quot;...&quot;)) { /* ... */ }</span></span>\n<span class="line"><span>    });</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h5 id="示例-system-js里的动态模块加载" tabindex="-1">示例：System.js里的动态模块加载 <a class="header-anchor" href="#示例-system-js里的动态模块加载" aria-label="Permalink to &quot;示例：System.js里的动态模块加载&quot;">​</a></h5><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>declare const System: any;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>import { ZipCodeValidator as Zip } from &quot;./ZipCodeValidator&quot;;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>if (needZipValidation) {</span></span>\n<span class="line"><span>    System.import(&quot;./ZipCodeValidator&quot;).then((ZipCodeValidator: typeof Zip) =&gt; {</span></span>\n<span class="line"><span>        var x = new ZipCodeValidator();</span></span>\n<span class="line"><span>        if (x.isAcceptable(&quot;...&quot;)) { /* ... */ }</span></span>\n<span class="line"><span>    });</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h1 id="使用其它的javascript库" tabindex="-1">使用其它的JavaScript库 <a class="header-anchor" href="#使用其它的javascript库" aria-label="Permalink to &quot;使用其它的JavaScript库&quot;">​</a></h1><p>要想描述非TypeScript编写的类库的类型，我们需要声明类库所暴露出的API。</p><p>我们叫它声明因为它不是“外部程序”的具体实现。 它们通常是在<code>.d.ts</code>文件里定义的。 如果你熟悉C/C++，你可以把它们当做<code>.h</code>文件。 让我们看一些例子。</p><h2 id="外部模块" tabindex="-1">外部模块 <a class="header-anchor" href="#外部模块" aria-label="Permalink to &quot;外部模块&quot;">​</a></h2><p>在Node.js里大部分工作是通过加载一个或多个模块实现的。 我们可以使用顶级的<code>export</code>声明来为每个模块都定义一个<code>.d.ts</code>文件，但最好还是写在一个大的<code>.d.ts</code>文件里。 我们使用与构造一个外部命名空间相似的方法，但是这里使用<code>module</code>关键字并且把名字用引号括起来，方便之后<code>import</code>。 例如：</p><h5 id="node-d-ts-simplified-excerpt" tabindex="-1">node.d.ts (simplified excerpt) <a class="header-anchor" href="#node-d-ts-simplified-excerpt" aria-label="Permalink to &quot;node.d.ts (simplified excerpt)&quot;">​</a></h5><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>declare module &quot;url&quot; {</span></span>\n<span class="line"><span>    export interface Url {</span></span>\n<span class="line"><span>        protocol?: string;</span></span>\n<span class="line"><span>        hostname?: string;</span></span>\n<span class="line"><span>        pathname?: string;</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    export function parse(urlStr: string, parseQueryString?, slashesDenoteHost?): Url;</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>declare module &quot;path&quot; {</span></span>\n<span class="line"><span>    export function normalize(p: string): string;</span></span>\n<span class="line"><span>    export function join(...paths: any[]): string;</span></span>\n<span class="line"><span>    export let sep: string;</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>现在我们可以<code>/// &lt;reference&gt;</code> <code>node.d.ts</code>并且使用<code>import url = require(&quot;url&quot;);</code>或<code>import * as URL from &quot;url&quot;</code>加载模块。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>/// &lt;reference path=&quot;node.d.ts&quot;/&gt;</span></span>\n<span class="line"><span>import * as URL from &quot;url&quot;;</span></span>\n<span class="line"><span>let myUrl = URL.parse(&quot;http://www.typescriptlang.org&quot;);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="外部模块简写" tabindex="-1">外部模块简写 <a class="header-anchor" href="#外部模块简写" aria-label="Permalink to &quot;外部模块简写&quot;">​</a></h3><p>假如你不想在使用一个新模块之前花时间去编写声明，你可以采用声明的简写形式以便能够快速使用它。</p><h5 id="declarations-d-ts" tabindex="-1">declarations.d.ts <a class="header-anchor" href="#declarations-d-ts" aria-label="Permalink to &quot;declarations.d.ts&quot;">​</a></h5><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>declare module &quot;hot-new-module&quot;;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>简写模块里所有导出的类型将是<code>any</code>。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>import x, {y} from &quot;hot-new-module&quot;;</span></span>\n<span class="line"><span>x(y);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="模块声明通配符" tabindex="-1">模块声明通配符 <a class="header-anchor" href="#模块声明通配符" aria-label="Permalink to &quot;模块声明通配符&quot;">​</a></h3><p>某些模块加载器如<a href="https://github.com/systemjs/systemjs/blob/master/docs/overview.md#plugin-syntax" target="_blank" rel="noreferrer">SystemJS</a> 和<a href="https://github.com/amdjs/amdjs-api/blob/master/LoaderPlugins.md" target="_blank" rel="noreferrer">AMD</a>支持导入非JavaScript内容。 它们通常会使用一个前缀或后缀来表示特殊的加载语法。 模块声明通配符可以用来表示这些情况。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>declare module &quot;*!text&quot; {</span></span>\n<span class="line"><span>    const content: string;</span></span>\n<span class="line"><span>    export default content;</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span>// Some do it the other way around.</span></span>\n<span class="line"><span>declare module &quot;json!*&quot; {</span></span>\n<span class="line"><span>    const value: any;</span></span>\n<span class="line"><span>    export default value;</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>现在你可以就导入匹配<code>&quot;*!text&quot;</code>或<code>&quot;json!*&quot;</code>的内容了。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>import fileContent from &quot;./xyz.txt!text&quot;;</span></span>\n<span class="line"><span>import data from &quot;json!http://example.com/data.json&quot;;</span></span>\n<span class="line"><span>console.log(data, fileContent);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="umd模块" tabindex="-1">UMD模块 <a class="header-anchor" href="#umd模块" aria-label="Permalink to &quot;UMD模块&quot;">​</a></h3><p>有些模块被设计成兼容多个模块加载器，或者不使用模块加载器（全局变量）。 它们以<a href="https://github.com/umdjs/umd" target="_blank" rel="noreferrer">UMD</a>或<a href="http://isomorphic.net/" target="_blank" rel="noreferrer">Isomorphic</a>模块为代表。 这些库可以通过导入的形式或全局变量的形式访问。 例如：</p><h5 id="math-lib-d-ts" tabindex="-1">math-lib.d.ts <a class="header-anchor" href="#math-lib-d-ts" aria-label="Permalink to &quot;math-lib.d.ts&quot;">​</a></h5><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>export function isPrime(x: number): boolean;</span></span>\n<span class="line"><span>export as namespace mathLib;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>之后，这个库可以在某个模块里通过导入来使用：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>import { isPrime } from &quot;math-lib&quot;;</span></span>\n<span class="line"><span>isPrime(2);</span></span>\n<span class="line"><span>mathLib.isPrime(2); // ERROR: can&#39;t use the global definition from inside a module</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>它同样可以通过全局变量的形式使用，但只能在某个脚本里。 （脚本是指一个不带有导入或导出的文件。）</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>mathLib.isPrime(2);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h1 id="创建模块结构指导" tabindex="-1">创建模块结构指导 <a class="header-anchor" href="#创建模块结构指导" aria-label="Permalink to &quot;创建模块结构指导&quot;">​</a></h1><h2 id="尽可能地在顶层导出" tabindex="-1">尽可能地在顶层导出 <a class="header-anchor" href="#尽可能地在顶层导出" aria-label="Permalink to &quot;尽可能地在顶层导出&quot;">​</a></h2><p>用户应该更容易地使用你模块导出的内容。 嵌套层次过多会变得难以处理，因此仔细考虑一下如何组织你的代码。</p><p>从你的模块中导出一个命名空间就是一个增加嵌套的例子。 虽然命名空间有时候有它们的用处，在使用模块的时候它们额外地增加了一层。 这对用户来说是很不便的并且通常是多余的。</p><p>导出类的静态方法也有同样的问题 - 这个类本身就增加了一层嵌套。 除非它能方便表述或便于清晰使用，否则请考虑直接导出一个辅助方法。</p><h3 id="如果仅导出单个-class-或-function-使用-export-default" tabindex="-1">如果仅导出单个 <code>class</code> 或 <code>function</code>，使用 <code>export default</code> <a class="header-anchor" href="#如果仅导出单个-class-或-function-使用-export-default" aria-label="Permalink to &quot;如果仅导出单个 `class` 或 `function`，使用 `export default`&quot;">​</a></h3><p>就像“在顶层上导出”帮助减少用户使用的难度，一个默认的导出也能起到这个效果。 如果一个模块就是为了导出特定的内容，那么你应该考虑使用一个默认导出。 这会令模块的导入和使用变得些许简单。 比如：</p><h4 id="myclass-ts" tabindex="-1">MyClass.ts <a class="header-anchor" href="#myclass-ts" aria-label="Permalink to &quot;MyClass.ts&quot;">​</a></h4><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>export default class SomeType {</span></span>\n<span class="line"><span>  constructor() { ... }</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="myfunc-ts" tabindex="-1">MyFunc.ts <a class="header-anchor" href="#myfunc-ts" aria-label="Permalink to &quot;MyFunc.ts&quot;">​</a></h4><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>export default function getThing() { return &#39;thing&#39;; }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="consumer-ts" tabindex="-1">Consumer.ts <a class="header-anchor" href="#consumer-ts" aria-label="Permalink to &quot;Consumer.ts&quot;">​</a></h4><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>import t from &quot;./MyClass&quot;;</span></span>\n<span class="line"><span>import f from &quot;./MyFunc&quot;;</span></span>\n<span class="line"><span>let x = new t();</span></span>\n<span class="line"><span>console.log(f());</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>对用户来说这是最理想的。他们可以随意命名导入模块的类型（本例为<code>t</code>）并且不需要多余的（.）来找到相关对象。</p><h3 id="如果要导出多个对象-把它们放在顶层里导出" tabindex="-1">如果要导出多个对象，把它们放在顶层里导出 <a class="header-anchor" href="#如果要导出多个对象-把它们放在顶层里导出" aria-label="Permalink to &quot;如果要导出多个对象，把它们放在顶层里导出&quot;">​</a></h3><h4 id="mythings-ts" tabindex="-1">MyThings.ts <a class="header-anchor" href="#mythings-ts" aria-label="Permalink to &quot;MyThings.ts&quot;">​</a></h4><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>export class SomeType { /* ... */ }</span></span>\n<span class="line"><span>export function someFunc() { /* ... */ }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>相反地，当导入的时候：</p><h3 id="明确地列出导入的名字" tabindex="-1">明确地列出导入的名字 <a class="header-anchor" href="#明确地列出导入的名字" aria-label="Permalink to &quot;明确地列出导入的名字&quot;">​</a></h3><h4 id="consumer-ts-1" tabindex="-1">Consumer.ts <a class="header-anchor" href="#consumer-ts-1" aria-label="Permalink to &quot;Consumer.ts&quot;">​</a></h4><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>import { SomeType, SomeFunc } from &quot;./MyThings&quot;;</span></span>\n<span class="line"><span>let x = new SomeType();</span></span>\n<span class="line"><span>let y = someFunc();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="使用命名空间导入模式当你要导出大量内容的时候" tabindex="-1">使用命名空间导入模式当你要导出大量内容的时候 <a class="header-anchor" href="#使用命名空间导入模式当你要导出大量内容的时候" aria-label="Permalink to &quot;使用命名空间导入模式当你要导出大量内容的时候&quot;">​</a></h3><h4 id="mylargemodule-ts" tabindex="-1">MyLargeModule.ts <a class="header-anchor" href="#mylargemodule-ts" aria-label="Permalink to &quot;MyLargeModule.ts&quot;">​</a></h4><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>export class Dog { ... }</span></span>\n<span class="line"><span>export class Cat { ... }</span></span>\n<span class="line"><span>export class Tree { ... }</span></span>\n<span class="line"><span>export class Flower { ... }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="consumer-ts-2" tabindex="-1">Consumer.ts <a class="header-anchor" href="#consumer-ts-2" aria-label="Permalink to &quot;Consumer.ts&quot;">​</a></h4><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>import * as myLargeModule from &quot;./MyLargeModule.ts&quot;;</span></span>\n<span class="line"><span>let x = new myLargeModule.Dog();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="使用重新导出进行扩展" tabindex="-1">使用重新导出进行扩展 <a class="header-anchor" href="#使用重新导出进行扩展" aria-label="Permalink to &quot;使用重新导出进行扩展&quot;">​</a></h2><p>你可能经常需要去扩展一个模块的功能。 JS里常用的一个模式是JQuery那样去扩展原对象。 如我们之前提到的，模块不会像全局命名空间对象那样去<em>合并</em>。 推荐的方案是<em>不要</em>去改变原来的对象，而是导出一个新的实体来提供新的功能。</p><p>假设<code>Calculator.ts</code>模块里定义了一个简单的计算器实现。 这个模块同样提供了一个辅助函数来测试计算器的功能，通过传入一系列输入的字符串并在最后给出结果。</p><h4 id="calculator-ts" tabindex="-1">Calculator.ts <a class="header-anchor" href="#calculator-ts" aria-label="Permalink to &quot;Calculator.ts&quot;">​</a></h4><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>export class Calculator {</span></span>\n<span class="line"><span>    private current = 0;</span></span>\n<span class="line"><span>    private memory = 0;</span></span>\n<span class="line"><span>    private operator: string;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    protected processDigit(digit: string, currentValue: number) {</span></span>\n<span class="line"><span>        if (digit &gt;= &quot;0&quot; &amp;&amp; digit &lt;= &quot;9&quot;) {</span></span>\n<span class="line"><span>            return currentValue * 10 + (digit.charCodeAt(0) - &quot;0&quot;.charCodeAt(0));</span></span>\n<span class="line"><span>        }</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    protected processOperator(operator: string) {</span></span>\n<span class="line"><span>        if ([&quot;+&quot;, &quot;-&quot;, &quot;*&quot;, &quot;/&quot;].indexOf(operator) &gt;= 0) {</span></span>\n<span class="line"><span>            return operator;</span></span>\n<span class="line"><span>        }</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    protected evaluateOperator(operator: string, left: number, right: number): number {</span></span>\n<span class="line"><span>        switch (this.operator) {</span></span>\n<span class="line"><span>            case &quot;+&quot;: return left + right;</span></span>\n<span class="line"><span>            case &quot;-&quot;: return left - right;</span></span>\n<span class="line"><span>            case &quot;*&quot;: return left * right;</span></span>\n<span class="line"><span>            case &quot;/&quot;: return left / right;</span></span>\n<span class="line"><span>        }</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    private evaluate() {</span></span>\n<span class="line"><span>        if (this.operator) {</span></span>\n<span class="line"><span>            this.memory = this.evaluateOperator(this.operator, this.memory, this.current);</span></span>\n<span class="line"><span>        }</span></span>\n<span class="line"><span>        else {</span></span>\n<span class="line"><span>            this.memory = this.current;</span></span>\n<span class="line"><span>        }</span></span>\n<span class="line"><span>        this.current = 0;</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    public handelChar(char: string) {</span></span>\n<span class="line"><span>        if (char === &quot;=&quot;) {</span></span>\n<span class="line"><span>            this.evaluate();</span></span>\n<span class="line"><span>            return;</span></span>\n<span class="line"><span>        }</span></span>\n<span class="line"><span>        else {</span></span>\n<span class="line"><span>            let value = this.processDigit(char, this.current);</span></span>\n<span class="line"><span>            if (value !== undefined) {</span></span>\n<span class="line"><span>                this.current = value;</span></span>\n<span class="line"><span>                return;</span></span>\n<span class="line"><span>            }</span></span>\n<span class="line"><span>            else {</span></span>\n<span class="line"><span>                let value = this.processOperator(char);</span></span>\n<span class="line"><span>                if (value !== undefined) {</span></span>\n<span class="line"><span>                    this.evaluate();</span></span>\n<span class="line"><span>                    this.operator = value;</span></span>\n<span class="line"><span>                    return;</span></span>\n<span class="line"><span>                }</span></span>\n<span class="line"><span>            }</span></span>\n<span class="line"><span>        }</span></span>\n<span class="line"><span>        throw new Error(`Unsupported input: &#39;${char}&#39;`);</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    public getResult() {</span></span>\n<span class="line"><span>        return this.memory;</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>export function test(c: Calculator, input: string) {</span></span>\n<span class="line"><span>    for (let i = 0; i &lt; input.length; i++) {</span></span>\n<span class="line"><span>        c.handelChar(input[i]);</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    console.log(`result of &#39;${input}&#39; is &#39;${c.getResult()}&#39;`);</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br></div></div><p>下面使用导出的<code>test</code>函数来测试计算器。</p><h4 id="testcalculator-ts" tabindex="-1">TestCalculator.ts <a class="header-anchor" href="#testcalculator-ts" aria-label="Permalink to &quot;TestCalculator.ts&quot;">​</a></h4><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>import { Calculator, test } from &quot;./Calculator&quot;;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>let c = new Calculator();</span></span>\n<span class="line"><span>test(c, &quot;1+2*33/11=&quot;); // prints 9</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>现在扩展它，添加支持输入其它进制（十进制以外），让我们来创建<code>ProgrammerCalculator.ts</code>。</p><h4 id="programmercalculator-ts" tabindex="-1">ProgrammerCalculator.ts <a class="header-anchor" href="#programmercalculator-ts" aria-label="Permalink to &quot;ProgrammerCalculator.ts&quot;">​</a></h4><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>import { Calculator } from &quot;./Calculator&quot;;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>class ProgrammerCalculator extends Calculator {</span></span>\n<span class="line"><span>    static digits = [&quot;0&quot;, &quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;7&quot;, &quot;8&quot;, &quot;9&quot;, &quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;, &quot;F&quot;];</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    constructor(public base: number) {</span></span>\n<span class="line"><span>        super();</span></span>\n<span class="line"><span>        if (base &lt;= 0 || base &gt; ProgrammerCalculator.digits.length) {</span></span>\n<span class="line"><span>            throw new Error(&quot;base has to be within 0 to 16 inclusive.&quot;);</span></span>\n<span class="line"><span>        }</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    protected processDigit(digit: string, currentValue: number) {</span></span>\n<span class="line"><span>        if (ProgrammerCalculator.digits.indexOf(digit) &gt;= 0) {</span></span>\n<span class="line"><span>            return currentValue * this.base + ProgrammerCalculator.digits.indexOf(digit);</span></span>\n<span class="line"><span>        }</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>// Export the new extended calculator as Calculator</span></span>\n<span class="line"><span>export { ProgrammerCalculator as Calculator };</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>// Also, export the helper function</span></span>\n<span class="line"><span>export { test } from &quot;./Calculator&quot;;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>新的<code>ProgrammerCalculator</code>模块导出的API与原先的<code>Calculator</code>模块很相似，但却没有改变原模块里的对象。 下面是测试ProgrammerCalculator类的代码：</p><h4 id="testprogrammercalculator-ts" tabindex="-1">TestProgrammerCalculator.ts <a class="header-anchor" href="#testprogrammercalculator-ts" aria-label="Permalink to &quot;TestProgrammerCalculator.ts&quot;">​</a></h4><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>import { Calculator, test } from &quot;./ProgrammerCalculator&quot;;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>let c = new Calculator(2);</span></span>\n<span class="line"><span>test(c, &quot;001+010=&quot;); // prints 3</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="模块里不要使用命名空间" tabindex="-1">模块里不要使用命名空间 <a class="header-anchor" href="#模块里不要使用命名空间" aria-label="Permalink to &quot;模块里不要使用命名空间&quot;">​</a></h2><p>当初次进入基于模块的开发模式时，可能总会控制不住要将导出包裹在一个命名空间里。 模块具有其自己的作用域，并且只有导出的声明才会在模块外部可见。 记住这点，命名空间在使用模块时几乎没什么价值。</p><p>在组织方面，命名空间对于在全局作用域内对逻辑上相关的对象和类型进行分组是很便利的。 例如，在C#里，你会从<code>System.Collections</code>里找到所有集合的类型。 通过将类型有层次地组织在命名空间里，可以方便用户找到与使用那些类型。 然而，模块本身已经存在于文件系统之中，这是必须的。 我们必须通过路径和文件名找到它们，这已经提供了一种逻辑上的组织形式。 我们可以创建<code>/collections/generic/</code>文件夹，把相应模块放在这里面。</p><p>命名空间对解决全局作用域里命名冲突来说是很重要的。 比如，你可以有一个<code>My.Application.Customer.AddForm</code>和<code>My.Application.Order.AddForm</code> – 两个类型的名字相同，但命名空间不同。 然而，这对于模块来说却不是一个问题。 在一个模块里，没有理由两个对象拥有同一个名字。 从模块的使用角度来说，使用者会挑出他们用来引用模块的名字，所以也没有理由发生重名的情况。</p><blockquote><p>更多关于模块和命名空间的资料查看[命名空间和模块](<a href="https://typescript.bootcss.com/Namespaces" target="_blank" rel="noreferrer">https://typescript.bootcss.com/Namespaces</a> and Modules.md)</p></blockquote><h2 id="危险信号" tabindex="-1">危险信号 <a class="header-anchor" href="#危险信号" aria-label="Permalink to &quot;危险信号&quot;">​</a></h2><p>以下均为模块结构上的危险信号。重新检查以确保你没有在对模块使用命名空间：</p><ul><li>文件的顶层声明是<code>export namespace Foo { ... }</code> （删除<code>Foo</code>并把所有内容向上层移动一层）</li><li>文件只有一个<code>export class</code>或<code>export function</code> （考虑使用<code>export default</code>）</li><li>多个文件的顶层具有同样的<code>export namespace Foo {</code> （不要以为这些会合并到一个<code>Foo</code>中！）</li></ul>',182)])])}]]);export{p as __pageData,l as default};
