import{_ as s,l as n,m as a,S as p}from"./chunks/framework.B9qehBrd.js";const e=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"src/notes/blog文章/2018.8.14更新.md","filePath":"src/notes/blog文章/2018.8.14更新.md","lastUpdated":1683717698000}');const l=s({name:"src/notes/blog文章/2018.8.14更新.md"},[["render",function(s,e,l,r,i,c){return a(),n("div",null,[...e[0]||(e[0]=[p('<h2 id="_2018-8-14更新" tabindex="-1">2018.8.14更新 <a class="header-anchor" href="#_2018-8-14更新" aria-label="Permalink to &quot;2018.8.14更新&quot;">​</a></h2><p>axios的封装根据需求的不同而不同。这里非常感谢评论里一些很中肯的建议，我也对此进行了思考和针对不同需求的改善。主要有以下改变：</p><p><strong>1.优化axios封装，去掉之前的get和post</strong></p><p><strong>2.断网情况处理</strong></p><p><strong>3.更加模块化的api管理</strong></p><p><strong>4.接口域名有多个的情况</strong></p><p><strong>5.api挂载到vue.prototype上省去引入的步骤</strong></p><p>http.js中axios封装的优化，先直接贴代码：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>/**</span></span>\n<span class="line"><span> * axios封装</span></span>\n<span class="line"><span> * 请求拦截、响应拦截、错误统一处理</span></span>\n<span class="line"><span> */</span></span>\n<span class="line"><span>import axios from &#39;axios&#39;;</span></span>\n<span class="line"><span>import router from &#39;../router&#39;;</span></span>\n<span class="line"><span>import store from &#39;../store/index&#39;;</span></span>\n<span class="line"><span>import { Toast } from &#39;vant&#39;;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>/** </span></span>\n<span class="line"><span> * 提示函数 </span></span>\n<span class="line"><span> * 禁止点击蒙层、显示一秒后关闭</span></span>\n<span class="line"><span> */</span></span>\n<span class="line"><span>const tip = msg =&gt; {    </span></span>\n<span class="line"><span>    Toast({        </span></span>\n<span class="line"><span>        message: msg,</span></span>\n<span class="line"><span>        duration: 1000,</span></span>\n<span class="line"><span>        forbidClick: true  </span></span>\n<span class="line"><span>    });</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>/** </span></span>\n<span class="line"><span> * 跳转登录页</span></span>\n<span class="line"><span> * 携带当前页面路由，以期在登录页面完成登录后返回当前页面</span></span>\n<span class="line"><span> */</span></span>\n<span class="line"><span>const toLogin = () =&gt; {</span></span>\n<span class="line"><span>    router.replace({</span></span>\n<span class="line"><span>        path: &#39;/login&#39;,        </span></span>\n<span class="line"><span>        query: {</span></span>\n<span class="line"><span>            redirect: router.currentRoute.fullPath</span></span>\n<span class="line"><span>        }</span></span>\n<span class="line"><span>    });</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>/** </span></span>\n<span class="line"><span> * 请求失败后的错误统一处理 </span></span>\n<span class="line"><span> * @param {Number} status 请求失败的状态码</span></span>\n<span class="line"><span> */</span></span>\n<span class="line"><span>const errorHandle = (status, other) =&gt; {</span></span>\n<span class="line"><span>    // 状态码判断</span></span>\n<span class="line"><span>    switch (status) {</span></span>\n<span class="line"><span>        // 401: 未登录状态，跳转登录页</span></span>\n<span class="line"><span>        case 401:</span></span>\n<span class="line"><span>            toLogin();</span></span>\n<span class="line"><span>            break;</span></span>\n<span class="line"><span>        // 403 token过期</span></span>\n<span class="line"><span>        // 清除token并跳转登录页</span></span>\n<span class="line"><span>        case 403:</span></span>\n<span class="line"><span>            tip(&#39;登录过期，请重新登录&#39;);</span></span>\n<span class="line"><span>            localStorage.removeItem(&#39;token&#39;);</span></span>\n<span class="line"><span>            store.commit(&#39;loginSuccess&#39;, null);</span></span>\n<span class="line"><span>            setTimeout(() =&gt; {</span></span>\n<span class="line"><span>                toLogin();</span></span>\n<span class="line"><span>            }, 1000);</span></span>\n<span class="line"><span>            break;</span></span>\n<span class="line"><span>        // 404请求不存在</span></span>\n<span class="line"><span>        case 404:</span></span>\n<span class="line"><span>            tip(&#39;请求的资源不存在&#39;); </span></span>\n<span class="line"><span>            break;</span></span>\n<span class="line"><span>        default:</span></span>\n<span class="line"><span>            console.log(other);   </span></span>\n<span class="line"><span>        }}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>// 创建axios实例</span></span>\n<span class="line"><span>var instance = axios.create({    timeout: 1000 * 12});</span></span>\n<span class="line"><span>// 设置post请求头</span></span>\n<span class="line"><span>instance.defaults.headers.post[&#39;Content-Type&#39;] = &#39;application/x-www-form-urlencoded&#39;;</span></span>\n<span class="line"><span>/** </span></span>\n<span class="line"><span> * 请求拦截器 </span></span>\n<span class="line"><span> * 每次请求前，如果存在token则在请求头中携带token </span></span>\n<span class="line"><span> */ </span></span>\n<span class="line"><span>instance.interceptors.request.use(    </span></span>\n<span class="line"><span>    config =&gt; {        </span></span>\n<span class="line"><span>        // 登录流程控制中，根据本地是否存在token判断用户的登录情况        </span></span>\n<span class="line"><span>        // 但是即使token存在，也有可能token是过期的，所以在每次的请求头中携带token        </span></span>\n<span class="line"><span>        // 后台根据携带的token判断用户的登录情况，并返回给我们对应的状态码        </span></span>\n<span class="line"><span>        // 而后我们可以在响应拦截器中，根据状态码进行一些统一的操作。        </span></span>\n<span class="line"><span>        const token = store.state.token;        </span></span>\n<span class="line"><span>        token &amp;&amp; (config.headers.Authorization = token);        </span></span>\n<span class="line"><span>        return config;    </span></span>\n<span class="line"><span>    },    </span></span>\n<span class="line"><span>    error =&gt; Promise.error(error))</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>// 响应拦截器</span></span>\n<span class="line"><span>instance.interceptors.response.use(    </span></span>\n<span class="line"><span>    // 请求成功</span></span>\n<span class="line"><span>    res =&gt; res.status === 200 ? Promise.resolve(res) : Promise.reject(res),    </span></span>\n<span class="line"><span>    // 请求失败</span></span>\n<span class="line"><span>    error =&gt; {</span></span>\n<span class="line"><span>        const { response } = error;</span></span>\n<span class="line"><span>        if (response) {</span></span>\n<span class="line"><span>            // 请求已发出，但是不在2xx的范围 </span></span>\n<span class="line"><span>            errorHandle(response.status, response.data.message);</span></span>\n<span class="line"><span>            return Promise.reject(response);</span></span>\n<span class="line"><span>        } else {</span></span>\n<span class="line"><span>            // 处理断网的情况</span></span>\n<span class="line"><span>            // eg:请求超时或断网时，更新state的network状态</span></span>\n<span class="line"><span>            // network状态在app.vue中控制着一个全局的断网提示组件的显示隐藏</span></span>\n<span class="line"><span>            // 关于断网组件中的刷新重新获取数据，会在断网组件中说明</span></span>\n<span class="line"><span>            if (!window.navigator.onLine) {</span></span>\n<span class="line"><span>               store.commit(&#39;changeNetwork&#39;, false);</span></span>\n<span class="line"><span>            } else {</span></span>\n<span class="line"><span>                return Promise.reject(error);</span></span>\n<span class="line"><span>            }</span></span>\n<span class="line"><span>        }</span></span>\n<span class="line"><span>    });</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>export default instance;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br></div></div><p>这个axios和之前的大同小异，做了如下几点改变：</p><p>1.去掉了之前get和post方法的封装，通过创建一个axios实例然后export default方法导出，这样使用起来更灵活一些。</p><p>2.去掉了通过环境变量控制baseUrl的值。考虑到接口会有多个不同域名的情况，所以准备通过js变量来控制接口域名。这点具体在api里会介绍。</p><p>3.增加了请求超时，即断网状态的处理。说下思路，当断网时，通过更新vuex中network的状态来控制断网提示组件的显示隐藏。断网提示一般会有重新加载数据的操作，这步会在后面对应的地方介绍。</p><p>4.公用函数进行抽出，简化代码，尽量保证单一职责原则。</p><p><strong>下面说下api这块，考虑到一下需求：</strong></p><p>1.更加模块化</p><p>2.更方便多人开发，有效减少解决命名冲突</p><p>3.处理接口域名有多个情况</p><p>这里这里呢新建了一个api文件夹，里面有一个index.js和一个base.js，以及多个根据模块划分的接口js文件。index.js是一个api的出口，base.js管理接口域名，其他js则用来管理各个模块的接口。</p><p>先放index.js代码：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>/** </span></span>\n<span class="line"><span> * api接口的统一出口</span></span>\n<span class="line"><span> */</span></span>\n<span class="line"><span>// 文章模块接口</span></span>\n<span class="line"><span>import article from &#39;@/api/article&#39;;</span></span>\n<span class="line"><span>// 其他模块的接口……</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>// 导出接口</span></span>\n<span class="line"><span>export default {    </span></span>\n<span class="line"><span>    article,</span></span>\n<span class="line"><span>    // ……</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>index.js是一个api接口的出口，这样就可以把api接口根据功能划分为多个模块，利于多人协作开发，比如一个人只负责一个模块的开发等，还能方便每个模块中接口的命名哦。</p><p>base.js:</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>/**</span></span>\n<span class="line"><span> * 接口域名的管理</span></span>\n<span class="line"><span> */</span></span>\n<span class="line"><span>const base = {    </span></span>\n<span class="line"><span>    sq: &#39;https://xxxx111111.com/api/v1&#39;,    </span></span>\n<span class="line"><span>    bd: &#39;http://xxxxx22222.com/api&#39;</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>export default base;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>通过base.js来管理我们的接口域名，不管有多少个都可以通过这里进行接口的定义。即使修改起来，也是很方便的。</p><p>最后就是接口模块的说明，例如上面的article.js:</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>/**</span></span>\n<span class="line"><span> * article模块接口列表</span></span>\n<span class="line"><span> */</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>import base from &#39;./base&#39;; // 导入接口域名列表</span></span>\n<span class="line"><span>import axios from &#39;@/utils/http&#39;; // 导入http中创建的axios实例</span></span>\n<span class="line"><span>import qs from &#39;qs&#39;; // 根据需求是否导入qs模块</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>const article = {    </span></span>\n<span class="line"><span>    // 新闻列表    </span></span>\n<span class="line"><span>    articleList () {        </span></span>\n<span class="line"><span>        return axios.get(`${base.sq}/topics`);    </span></span>\n<span class="line"><span>    },    </span></span>\n<span class="line"><span>    // 新闻详情,演示    </span></span>\n<span class="line"><span>    articleDetail (id, params) {        </span></span>\n<span class="line"><span>        return axios.get(`${base.sq}/topic/${id}`, {            </span></span>\n<span class="line"><span>            params: params        </span></span>\n<span class="line"><span>        });    </span></span>\n<span class="line"><span>    },</span></span>\n<span class="line"><span>    // post提交    </span></span>\n<span class="line"><span>    login (params) {        </span></span>\n<span class="line"><span>        return axios.post(`${base.sq}/accesstoken`, qs.stringify(params));    </span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>    // 其他接口…………</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>export default article;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><p>1.通过直接引入我们封装好的axios实例，然后定义接口、调用axios实例并返回，可以更灵活的使用axios，比如你可以对post请求时提交的数据进行一个qs序列化的处理等。</p><p>2.请求的配置更灵活，你可以针对某个需求进行一个不同的配置。关于配置的优先级，axios文档说的很清楚，这个顺序是：在 <code>lib/defaults.js</code> 找到的库的默认值，然后是实例的 <code>defaults</code> 属性，最后是请求的 <code>config</code> 参数。后者将优先于前者。</p><p>3.restful风格的接口，也可以通过这种方式灵活的设置api接口地址。</p><p>最后，为了方便api的调用，我们需要将其挂载到vue的原型上。在main.js中：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>import Vue from &#39;vue&#39;</span></span>\n<span class="line"><span>import App from &#39;./App&#39;</span></span>\n<span class="line"><span>import router from &#39;./router&#39; // 导入路由文件</span></span>\n<span class="line"><span>import store from &#39;./store&#39; // 导入vuex文件</span></span>\n<span class="line"><span>import api from &#39;./api&#39; // 导入api接口</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>Vue.prototype.$api = api; // 将api挂载到vue的原型上</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>然后我们可以在页面中这样调用接口，eg：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>methods: {    </span></span>\n<span class="line"><span>    onLoad(id) {      </span></span>\n<span class="line"><span>        this.$api.article.articleDetail(id, {        </span></span>\n<span class="line"><span>            api: 123      </span></span>\n<span class="line"><span>        }).then(res=&gt; {</span></span>\n<span class="line"><span>            // 执行某些操作      </span></span>\n<span class="line"><span>        })    </span></span>\n<span class="line"><span>    }  </span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>再提一下断网的处理，这里只做一个简单的示例：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;template&gt;  </span></span>\n<span class="line"><span>    &lt;div id=&quot;app&quot;&gt;    </span></span>\n<span class="line"><span>        &lt;div v-if=&quot;!network&quot;&gt;      </span></span>\n<span class="line"><span>            &lt;h3&gt;我没网了&lt;/h3&gt;      </span></span>\n<span class="line"><span>            &lt;div @click=&quot;onRefresh&quot;&gt;刷新&lt;/div&gt;      </span></span>\n<span class="line"><span>        &lt;/div&gt;    </span></span>\n<span class="line"><span>        &lt;router-view/&gt;      </span></span>\n<span class="line"><span>    &lt;/div&gt;</span></span>\n<span class="line"><span>&lt;/template&gt;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>&lt;script&gt;</span></span>\n<span class="line"><span>    import { mapState } from &#39;vuex&#39;;</span></span>\n<span class="line"><span>    export default {  </span></span>\n<span class="line"><span>        name: &#39;App&#39;,  </span></span>\n<span class="line"><span>        computed: {    </span></span>\n<span class="line"><span>            ...mapState([&#39;network&#39;])  </span></span>\n<span class="line"><span>        },  </span></span>\n<span class="line"><span>        methods: {    </span></span>\n<span class="line"><span>            // 通过跳转一个空页面再返回的方式来实现刷新当前页面数据的目的</span></span>\n<span class="line"><span>            onRefresh () {      </span></span>\n<span class="line"><span>                this.$router.replace(&#39;/refresh&#39;)    </span></span>\n<span class="line"><span>            }  </span></span>\n<span class="line"><span>        }</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>&lt;/script&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>这是app.vue，这里简单演示一下断网。在http.js中介绍了，我们会在断网的时候，来更新vue中network的状态，那么这里我们根据network的状态来判断是否需要加载这个断网组件。断网情况下，加载断网组件，不加载对应页面的组件。当点击刷新的时候，我们通过跳转refesh页面然后立即返回的方式来实现重新获取数据的操作。因此我们需要新建一个refresh.vue页面，并在其<code>beforeRouteEnter</code>钩子中再返回当前页面。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// refresh.vue</span></span>\n<span class="line"><span>beforeRouteEnter (to, from, next) {</span></span>\n<span class="line"><span>    next(vm =&gt; {            </span></span>\n<span class="line"><span>        vm.$router.replace(from.fullPath)        </span></span>\n<span class="line"><span>    })    </span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>这是一种全局通用的断网提示，当然了，也可以根据自己的项目需求操作。具体操作就仁者见仁智者见智了。</p><p>如果更多的需求，或者说是不一样的需求，可以根据自己的需求进行一个改进。</p><p>如果感觉对你有帮助，那就收藏❤❤吧！</p>',41)])])}]]);export{e as __pageData,l as default};
