import{_ as e,l as o,m as a,S as s}from"./chunks/framework.B9qehBrd.js";const r=JSON.parse('{"title":"Chrome DevTools中的这些骚操作，你都知道吗？","description":"","frontmatter":{},"headers":[],"relativePath":"src/前端笔记/其他/chrome使用技巧/chrome开发必备.md","filePath":"src/前端笔记/其他/chrome使用技巧/chrome开发必备.md","lastUpdated":1717659616000}');const i=e({name:"src/前端笔记/其他/chrome使用技巧/chrome开发必备.md"},[["render",function(e,r,i,c,d,t){return a(),o("div",null,[...r[0]||(r[0]=[s('<h1 id="chrome-devtools中的这些骚操作-你都知道吗" tabindex="-1">Chrome DevTools中的这些骚操作，你都知道吗？ <a class="header-anchor" href="#chrome-devtools中的这些骚操作-你都知道吗" aria-label="Permalink to &quot;Chrome DevTools中的这些骚操作，你都知道吗？&quot;">​</a></h1><h2 id="引言-🏂" tabindex="-1"><strong>引言 🏂</strong> <a class="header-anchor" href="#引言-🏂" aria-label="Permalink to &quot;**引言 🏂**&quot;">​</a></h2><p>作为开发人员，平时用的最多的就是<code>Chrome devtools</code>了，但是可能很多同学都像我一样平时用的最多也就只是<code>Console</code>和<code>Elements</code>面板了。</p><p>我整理了一些我平时用的比较多的一些调试小技巧，相信对提高你的工作效率能起到不小的帮助！</p><h2 id="命令-command-菜单-🏈" tabindex="-1"><strong>命令（<code>Command</code>） 菜单 🏈</strong> <a class="header-anchor" href="#命令-command-菜单-🏈" aria-label="Permalink to &quot;**命令（`Command`） 菜单 🏈**&quot;">​</a></h2><p>“命令”菜单是最最常用的，本文也会多次用到，所以这里先说一下打开方式:</p><p>按<code>Cmd + Shift + P</code>（如果使用<code>Windows</code>，则按<code>Ctrl + Shift + P</code>）打开“命令”菜单。<img src="https://user-gold-cdn.xitu.io/2020/5/19/1722a93a1d5c4275?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><h2 id="截图dom元素-🏉" tabindex="-1"><strong>截图<code>DOM</code>元素 🏉</strong> <a class="header-anchor" href="#截图dom元素-🏉" aria-label="Permalink to &quot;**截图`DOM`元素 🏉**&quot;">​</a></h2><p>当你只想对一个特别的 <code>DOM</code> 节点进行截图时，你可能需要使用其他工具弄半天，但现在你直接选中那个节点，打开 命令（<code>Command</code>） 菜单并且使用 <code>节点截图</code> 就可以了。<img src="https://user-gold-cdn.xitu.io/2020/5/19/1722a93a1d8cd947?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img">截取特定节点对应上图命令是<code>Screenshot Capture node screenshot</code>。<img src="https://user-gold-cdn.xitu.io/2020/5/19/1722a93a1c3c6a34?imageslim" alt="img"></p><p>截取特定<code>DOM</code>元素示例：<img src="https://user-gold-cdn.xitu.io/2020/5/19/1722a93a1fef81b5?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>不只是这样，你同样可以用这种方式 实现<code>全屏截图</code> ：通过 <code>Screenshot Capture full size screenshot</code> 命令。</p><blockquote><p>❝</p><p>请注意，这里说的是全屏，并不只是页面可视区域，而是包含滚动条在内的所有页面内容。</p><p>❞</p></blockquote><p>对应截取全屏示例：<img src="https://user-gold-cdn.xitu.io/2020/5/19/1722a93a235a2d1a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><h2 id="在控制台中使用上次操作的值-🎃" tabindex="-1"><strong>在控制台中使用上次操作的值 🎃</strong> <a class="header-anchor" href="#在控制台中使用上次操作的值-🎃" aria-label="Permalink to &quot;**在控制台中使用上次操作的值 🎃**&quot;">​</a></h2><p>我是最近才发现这个技巧。使用<code>$_</code>可以引用在控制台执行的前一步操作的返回值。如果您正在控制台调试一些<code>JavaScript</code>代码，并且需要引用先前的返回值，那么这可能非常方便。<img src="https://user-gold-cdn.xitu.io/2020/5/19/1722a93a25f05d88?imageslim" alt="img"></p><h2 id="重新发起xhr请求-🚀" tabindex="-1"><strong>重新发起<code>xhr</code>请求 🚀</strong> <a class="header-anchor" href="#重新发起xhr请求-🚀" aria-label="Permalink to &quot;**重新发起`xhr`请求 🚀**&quot;">​</a></h2><p>在平时和后端联调时，我们用的最多的可能就是<code>Network</code>面板了。但是每次想重新查看一个请求，我们往往都是通过刷新页面、点击按钮等方式去触发<code>xhr</code>请求，这种方式有时显得会比较麻烦，我们可以通过<code>google</code>提供的<code>Replay XHR</code>的方式去发起一条新的请求，这样对于我们开发效率的提升是有所帮助的。<img src="https://user-gold-cdn.xitu.io/2020/5/19/1722a93a510e2d22?imageslim" alt="img"></p><h2 id="编辑页面上的任何文本-✍" tabindex="-1"><strong>编辑页面上的任何文本 ✍</strong> <a class="header-anchor" href="#编辑页面上的任何文本-✍" aria-label="Permalink to &quot;**编辑页面上的任何文本 ✍**&quot;">​</a></h2><p>在控制台输入<code>document.body.contentEditable=&quot;true&quot;</code>或者<code>document.designMode = &#39;on&#39;</code>就可以实现对网页的编辑了。<img src="https://user-gold-cdn.xitu.io/2020/5/19/1722a93a55292857?imageslim" alt="img">其实这个还是比较实用的，比如你要测试一个<code>DOM</code>节点文字太长时，样式是否会混乱，或者要去直接修改页面元素去满足一些业务需求时。（我之前是在<code>Elements</code>面板一个一个去修改的，，，）</p><h2 id="网络面板-network-的幻灯片模式-🌇" tabindex="-1"><strong>网络面板（<code>Network</code>）的幻灯片模式 🌇</strong> <a class="header-anchor" href="#网络面板-network-的幻灯片模式-🌇" aria-label="Permalink to &quot;**网络面板（`Network`）的幻灯片模式 🌇**&quot;">​</a></h2><p>启动<code>Network</code> 面板下的<code>Capture screenshots</code>就可以在页面加载时捕捉屏幕截图。有点<code>幻灯片</code>的感觉。<img src="https://user-gold-cdn.xitu.io/2020/5/19/1722a93a5b2852d5?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img">单击每一帧截图，显示的就是对应时刻发生的网络请求。这种可视化的展现形式会让你更加清楚每一时刻发生的网络请求情况。</p><p><img src="https://user-gold-cdn.xitu.io/2020/5/19/1722a93ab6581edd?imageslim" alt="img"></p><h2 id="动画检查-🎏" tabindex="-1"><strong>动画检查 🎏</strong> <a class="header-anchor" href="#动画检查-🎏" aria-label="Permalink to &quot;**动画检查 🎏**&quot;">​</a></h2><p><code>DevTools</code> 中有一个动画面板，默认情况下它是关闭的，很多人可能不太清楚这个功能。它可以让你控制和操纵 <code>CSS</code> 动画，并且可视化这些动画是如何工作的。</p><p>要打开该面板，可以在 <code>DevTools</code> 右上角菜单 → <code>More tools</code> 中打开 <code>Animations</code> ：<img src="https://user-gold-cdn.xitu.io/2020/5/19/1722a93a72203c05?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>默认情况下，<code>DevTools</code> 会“监听”动画。一旦触发，它们将被添加到列表中。你能看到这些动画块如何显示。在动画本身上，<code>DevTools</code> 会向我们展示哪些属性正在更改，例如 <code>background-color</code> 或 <code>transform</code>。</p><p>然后，我们可以通过使用鼠标拖动或调整时间轴来修改该动画：<img src="https://user-gold-cdn.xitu.io/2020/5/19/1722a93a7b4442c9?imageslim" alt="img"></p><h2 id="递增-递减-css-属性值-🃏" tabindex="-1"><strong>递增/递减 CSS 属性值 🃏</strong> <a class="header-anchor" href="#递增-递减-css-属性值-🃏" aria-label="Permalink to &quot;**递增/递减 CSS 属性值 🃏**&quot;">​</a></h2><p>作为前端开发，平时少不了通过<code>Elements</code>面板去查找元素以及它的<code>css</code>样式。有时调整像素<code>px</code>会比较麻烦一点，这时就可以使用快捷键去帮你完成：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>* 增量0.1</span></span>\n<span class="line"><span>  * Mac： Option +向上和Option +向下</span></span>\n<span class="line"><span>  * Windows： Alt +向上和Alt +向下</span></span>\n<span class="line"><span>* 增量1</span></span>\n<span class="line"><span>  * Mac：向上+向下</span></span>\n<span class="line"><span>  * Windows：向上+向下</span></span>\n<span class="line"><span>* 增量10</span></span>\n<span class="line"><span>  * Mac：⇧+向上和⇧+向下</span></span>\n<span class="line"><span>  * Windows：⇧+向上和⇧+向下</span></span>\n<span class="line"><span>* 递增100</span></span>\n<span class="line"><span>  * Mac： ⌘+向上和⌘+向下</span></span>\n<span class="line"><span>  * Windows： Ctrl +向上和Ctrl +向下</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="在低端设备和弱网情况下进行测试-📱" tabindex="-1"><strong>在低端设备和弱网情况下进行测试 📱</strong> <a class="header-anchor" href="#在低端设备和弱网情况下进行测试-📱" aria-label="Permalink to &quot;**在低端设备和弱网情况下进行测试 📱**&quot;">​</a></h2><p>我们平时开发一般都是在办公室（wifi 网速加快），而且设备一般都是市面上较新的。但是产品的研发和推广，一定要考虑低设备人群和弱网的情况。</p><p>在<code>Chrome DevTools</code>中可以轻松调节<code>CPU</code>功能和<code>网络速度</code>。这样，我们就可以测试 Web 应用程序性能并进行相应优化。</p><p>具体打开方式是：在<code>Chrome DevTools</code>中通过<code>CMD/Ctrl + Shift + p</code>打开命令菜单。然后输入<code>Show Performance</code>打开性能面板。<img src="https://user-gold-cdn.xitu.io/2020/5/19/1722a93a95bc8ece?imageslim" alt="img"></p><h2 id="copying-saving-📜" tabindex="-1"><strong>copying &amp; saving 📜</strong> <a class="header-anchor" href="#copying-saving-📜" aria-label="Permalink to &quot;**copying &amp; saving 📜**&quot;">​</a></h2><p>在调试的过程中，我们总会有对 <code>Dev Tools</code> 里面的数据进行 <code>复制</code> 或者 <code>保存</code> 的操作，其实他们也是有一些小技巧的！</p><h3 id="copy" tabindex="-1">copy() <a class="header-anchor" href="#copy" aria-label="Permalink to &quot;copy()&quot;">​</a></h3><p>可以通过全局的方法 <code>copy()</code> 在 <code>console</code> 里 <code>copy</code> 任何你能拿到的资源<img src="https://user-gold-cdn.xitu.io/2020/5/19/1722a93aa2c22452?imageslim" alt="img"></p><h3 id="store-as-global-variable" tabindex="-1">Store as global variable <a class="header-anchor" href="#store-as-global-variable" aria-label="Permalink to &quot;Store as global variable&quot;">​</a></h3><p>如果在<code>console</code>中打印了一堆数据，想对这堆数据做额外的操作，可以将它存储为一个全局变量。只需要右击它，并选择 “Store as global variable”选项。<img src="https://user-gold-cdn.xitu.io/2020/5/19/1722a93aa81da076?imageslim" alt="img">第一次使用的话，它会创建一个名为 <code>temp1</code> 的变量，第二次创建 <code>temp2</code>，第三次 ... 。通过使用这些变量来操作对应的数据，不用再担心影响到他们原来的值。</p><h2 id="自定义-devtools-🌈" tabindex="-1"><strong>自定义 devtools 🌈</strong> <a class="header-anchor" href="#自定义-devtools-🌈" aria-label="Permalink to &quot;**自定义 devtools 🌈**&quot;">​</a></h2><p><img src="https://user-gold-cdn.xitu.io/2020/5/19/1722a93ab6302535?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>大家平时用的最多的<code>Chrome 主题</code>可能就是白色/黑色这两种了，但用的久了，难免想尝试像<code>IDE</code>一样切换主题。</p><h3 id="打开方式" tabindex="-1">打开方式 <a class="header-anchor" href="#打开方式" aria-label="Permalink to &quot;打开方式&quot;">​</a></h3><ul><li><p>首先需要启用实验模式中的<code>Allow custom UI themes</code></p><ul><li>地址栏输入如下<code>url</code></li></ul><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>chrome://flags/#enable-devtools-experiments # 启用实验功能</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>启用实验功能，并重启浏览器<img src="https://user-gold-cdn.xitu.io/2020/5/19/1722a93b02b8c157?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></li><li>控制台中使用快捷键<code>F1</code>打开设置，切换到<code>Experiments</code> 选项</li><li>启用<code>Allow custom UI themes</code><img src="https://user-gold-cdn.xitu.io/2020/5/19/1722a93b039018f7?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></li></ul></li><li><p>从<code>Chrome</code>商店安装<code>Material DevTools Theme Collection</code>扩展程序<img src="https://user-gold-cdn.xitu.io/2020/5/19/1722a93af710ee3b?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p></li><li><p>选择你喜欢的主题即可<img src="https://user-gold-cdn.xitu.io/2020/5/19/1722a93b0604e734?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p></li></ul><h2 id="css-js-覆盖率-✅" tabindex="-1"><strong>CSS/JS 覆盖率 ✅</strong> <a class="header-anchor" href="#css-js-覆盖率-✅" aria-label="Permalink to &quot;**CSS/JS 覆盖率 ✅**&quot;">​</a></h2><p><code>Chrome DevTools</code> 中的<code>Coverage</code>功能可以帮助我们查看代码的覆盖率。</p><h3 id="打开方式-1" tabindex="-1">打开方式 <a class="header-anchor" href="#打开方式-1" aria-label="Permalink to &quot;打开方式&quot;">​</a></h3><ul><li>打开调试面板，用快捷键 <code>shift+command+P （mac）</code>输入 <code>Show Coverage</code>调出相应面板<img src="https://user-gold-cdn.xitu.io/2020/5/19/1722a93b0fdce938?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></li><li>点击<code>reload</code> 按钮开始检测<img src="https://user-gold-cdn.xitu.io/2020/5/19/1722a93b3ed6edda?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></li><li>点击相应文件即可查看具体的覆盖情况（绿色的为用到的代码，红色表示没有用到的代码）<img src="https://user-gold-cdn.xitu.io/2020/5/19/1722a93b6e99b826?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></li></ul><p>最后同样用一个动图做下展示：<img src="https://user-gold-cdn.xitu.io/2020/5/19/1722a93b4564c113?imageslim" alt="img"></p><h2 id="自定义代码片段-snippets-🌰" tabindex="-1"><strong>自定义代码片段 Snippets 🌰</strong> <a class="header-anchor" href="#自定义代码片段-snippets-🌰" aria-label="Permalink to &quot;**自定义代码片段 Snippets 🌰**&quot;">​</a></h2><p>在平常开发过程中，我们经常有些 <code>JavaScript</code> 的代码想在 <code>Chrome Devtools</code>中调试，直接在 <code>console</code> 下 写比较麻烦，或者我们经常有些代码片段(防抖、节流、获取地址栏参数等)想保存起来，每次打开 <code>Devtools</code> 都能获取到这些代码片段，而不用再去<code>google</code>，正好<code>Chrome Devtool</code> 就提供了这种功能。</p><p>如图所示，在 <code>Sources</code> 这个<code>tab</code>栏下，有个 <code>Snippets</code> 标签，在里面可以添加一些常用的代码片段。<img src="https://user-gold-cdn.xitu.io/2020/5/19/1722a93b457b30a4?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><h2 id="将图片复制为数据-uri-🦊" tabindex="-1"><strong>将图片复制为数据 URI 🦊</strong> <a class="header-anchor" href="#将图片复制为数据-uri-🦊" aria-label="Permalink to &quot;**将图片复制为数据 URI 🦊**&quot;">​</a></h2><h3 id="打开方式-2" tabindex="-1">打开方式 <a class="header-anchor" href="#打开方式-2" aria-label="Permalink to &quot;打开方式&quot;">​</a></h3><ul><li>选择<code>Network</code>面板</li><li>在资源面板中选择<code>Img</code></li><li>右键单击将其复制为数据<code>URI</code>（已编码为<code>base 64</code>）<img src="https://user-gold-cdn.xitu.io/2020/5/19/1722a93b51195416?imageslim" alt="img"></li></ul><h2 id="媒体查询-🔭" tabindex="-1"><strong>媒体查询 🔭</strong> <a class="header-anchor" href="#媒体查询-🔭" aria-label="Permalink to &quot;**媒体查询 🔭**&quot;">​</a></h2><p>媒体查询是自适应网页设计的基本部分。在<code>Chrome Devtools</code>中的<code>设备模式</code>下，在三圆点菜单中点击 <code>Show Media queries</code>即可启用：<img src="https://user-gold-cdn.xitu.io/2020/5/19/1722a93b59840a11?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"><code>Devtools</code>会在样式表中检测媒体查询，并在顶端标尺中将它们显示为彩色条形:<img src="https://user-gold-cdn.xitu.io/2020/5/19/1722a93b5f1f9a5a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img">那怎么使用呢？其实也很简单：</p><ul><li>点击媒体查询条形，调整视口大小和预览适合目标屏幕大小的样式</li><li>右键点击某个条形，查看媒体查询在 <code>CSS</code> 中何处定义并跳到源代码中的定义</li></ul><p><img src="https://user-gold-cdn.xitu.io/2020/5/19/1722a93b7e64c956?imageslim" alt="img"></p><h2 id="keys-values-🎯" tabindex="-1"><strong>keys/values 🎯</strong> <a class="header-anchor" href="#keys-values-🎯" aria-label="Permalink to &quot;**keys/values 🎯**&quot;">​</a></h2><p>这个是<code>Devtools</code>提供的快速查看一个对象的<code>key</code>、<code>values</code>的<code>API</code>。用起来也很简单：<img src="https://user-gold-cdn.xitu.io/2020/5/19/1722a93b89bad104?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><blockquote><p>❝</p><p>你可能会说<code>Object.keys()</code>和<code>Object.values()</code>也可以实现啊，但这个不是更简单点吗 🤠</p><p>❞</p></blockquote><h2 id="table-🦐" tabindex="-1"><strong>table 🦐</strong> <a class="header-anchor" href="#table-🦐" aria-label="Permalink to &quot;**table 🦐**&quot;">​</a></h2><p><code>Devtools</code>提供的用于将对象数组记录为表格的<code>API</code>:<img src="https://user-gold-cdn.xitu.io/2020/5/19/1722a93b9db53e5b?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"><img src="https://user-gold-cdn.xitu.io/2020/5/19/1722a93ba3535f1d?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p>',65)])])}]]);export{r as __pageData,i as default};
