const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/chunks/generateApitypes.DzX_pIdl.js","assets/chunks/framework.B9qehBrd.js"])))=>i.map(i=>d[i]);
import{a as e,s as n,o as r,V as t,L as a,l as s,m as o,S as i,H as p,p as l,K as c,u,Q as y,aD as d}from"./chunks/framework.B9qehBrd.js";import{R as m,k as h}from"./chunks/index.ClHilh5x.js";const f=JSON.parse('{"title":"生成 API ts 类型","description":"","frontmatter":{},"headers":[],"relativePath":"src/utils/generateApitypes.md","filePath":"src/utils/generateApitypes.md","lastUpdated":1736158905000}'),g={name:"src/utils/generateApitypes.md"},q=Object.assign(g,{setup(f){const g=e(!0),q=n();return r(async()=>{q.value=(await t(async()=>{const{default:e}=await import("./chunks/generateApitypes.DzX_pIdl.js");return{default:e}},__vite__mapDeps([0,1]))).default}),(e,n)=>{const r=a("ClientOnly");return o(),s("div",null,[n[1]||(n[1]=i("",6)),p(l(u(m),null,null,512),[[c,g.value]]),l(r,null,{default:y(()=>[l(u(h),{title:"基础用法",description:"根据 YAPI 生成 API ts 类型",locale:"",select:"vue",order:"vue,react,html",github:"",gitlab:"",theme:"",lightTheme:"",darkTheme:"",stackblitz:"%7B%22show%22%3Afalse%7D",codesandbox:"%7B%22show%22%3Afalse%7D",codeplayer:"%7B%22show%22%3Afalse%7D",files:"%7B%22vue%22%3A%7B%7D%2C%22react%22%3A%7B%7D%2C%22html%22%3A%7B%7D%7D",scope:"",htmlWriteWay:"write",visible:!0,onMount:n[0]||(n[0]=()=>{g.value=!1}),vueCode:u("<script setup lang=\"ts\">\nimport resJson from './api-res.json'\n\ninterface JsonSchemaProperty {\n  type?: string\n  description?: string\n  required?: boolean\n  items?: JsonSchemaProperty\n  properties?: Record<string, JsonSchemaProperty>\n}\n\nconst jsonSchemaStr = ref(resJson)\nconst apiTypesName = ref('Demo')\nconst yApiForm = ref({\n  useDocsDefine: false,\n})\n\nconst jsonSchemaObj = computed(() => {\n  try {\n    const { req_query = [], req_body_other = '{}', res_body = '{}' } = jsonSchemaStr.value.data || {}\n    const hasReqQuery = Array.isArray(req_query) && req_query.length > 0\n    const hasReqBody = req_body_other && req_body_other !== '{}'\n\n    // 构建请求类型\n    let requestTypes = ''\n    if (hasReqQuery && hasReqBody) {\n      requestTypes = `request: {\n        params: {\n          ${generateApiArrayTypes(req_query, 2)}\n        },\n        body: ${generateApiJsonSchemaTypes(req_body_other, 2)}\n      }`\n    }\n    else if (hasReqQuery) {\n      requestTypes = `request: {\n        ${generateApiArrayTypes(req_query, 1)}\n      }`\n    }\n    else if (hasReqBody) {\n      const jsonSchema = JSON.parse(req_body_other) || {}\n      requestTypes = `request: ${generateApiJsonSchemaTypes(jsonSchema, 1)}`\n    }\n    else {\n      requestTypes = 'request: Record<string, never>'\n    }\n\n    const jsonSchema = JSON.parse(res_body)?.properties?.data || {}\n    const typeDefinition = `interface ${apiTypesName.value.trim() || 'DefaultType'} {\n      ${requestTypes}\n      response: ${generateApiJsonSchemaTypes(jsonSchema, 1)}\n    }`\n    return formatTypeDefinition(typeDefinition)\n  }\n  catch (error) {\n    console.error('生成类型定义时出错:', error)\n    return '类型生成失败，请检查输入数据格式'\n  }\n})\n\n// 修改 generateApiArrayTypes 函数，添加缩进级别参数\nfunction generateApiArrayTypes(reqArray: any[] = [], indentLevel: number = 1) {\n  try {\n    let result = ''\n    const indent = '  '.repeat(indentLevel)\n\n    reqArray.forEach((param: any) => {\n      if (!param?.name) {\n        return\n      }\n\n      const required = param.required === '1'\n      const name = param.name.trim()\n      const type = getParameterType(param.type)\n      const desc = param.desc ? `${indent}// ${param.desc.trim()}\\n` : ''\n\n      result += `${desc}${indent}${name}${required ? '' : '?'}: ${type}\\n`\n    })\n\n    return result.trim()\n  }\n  catch (error) {\n    console.error('生成请求类型时出错:', error)\n    return '/* 类型生成失败 */'\n  }\n}\n\n// 修改 generateApiJsonSchemaTypes 函数，添加缩进级别参数\nfunction generateApiJsonSchemaTypes(jsonSchema: any, indentLevel: number = 1) {\n  try {\n    // 如果 jsonSchema 直接是类型定义\n    if (jsonSchema.type && !jsonSchema.properties) {\n      return getPropertyType(jsonSchema)\n    }\n\n    const indent = '  '.repeat(indentLevel)\n    let result = '{\\n'\n\n    // 获取属性的类型\n    function getPropertyType(prop: any): string {\n      if (!prop.type) {\n        return 'any'\n      }\n\n      switch (prop.type) {\n        case 'string':\n          return 'string'\n        case 'number':\n        case 'integer':\n          return 'number'\n        case 'boolean':\n          return 'boolean'\n        case 'array':\n          if (prop.items) {\n            return `${getPropertyType(prop.items)}[]`\n          }\n          return 'any[]'\n        case 'object':\n          if (prop.properties) {\n            let nestedInterface = '{\\n'\n            for (const [key, value] of Object.entries(prop.properties)) {\n              const typedValue = value as JsonSchemaProperty\n              const desc = typedValue.description ? `${indent}  // ${typedValue.description}\\n` : ''\n              nestedInterface += `${desc}${indent}    ${key}${typedValue.required ? '' : '?'}: ${getPropertyType(typedValue)}\\n`\n            }\n            nestedInterface += `${indent}  }`\n            return nestedInterface\n          }\n          return 'Record<string, any>'\n        default:\n          return 'any'\n      }\n    }\n\n    // 处理属性\n    if (jsonSchema.properties) {\n      for (const [key, value] of Object.entries(jsonSchema.properties)) {\n        if (!key || !value) {\n          continue\n        } // 跳过无效属性\n\n        const required = Array.isArray(jsonSchema.required) && jsonSchema.required.includes(key)\n        const desc = (value as any).description ? `${indent}  // ${(value as any).description.trim()}\\n` : ''\n        result += `${desc}${indent}  ${key}${yApiForm.value.useDocsDefine ? (required ? '' : '?') : ''}: ${getPropertyType(value as any)}\\n`\n      }\n    }\n\n    result += '}'\n    return result\n  }\n  catch (error) {\n    console.error('生成响应类型时出错:', error)\n    return '{ /* 类型生成失败 */ }'\n  }\n}\n\nfunction formatTypeDefinition(typeStr: string): string {\n  let indentLevel = 0\n  const lines = typeStr.split('\\n')\n\n  return lines\n    .map((line) => {\n      // 处理缩进\n      if (line.includes('}')) {\n        indentLevel--\n      }\n      const formatted = line.trim() ? '  '.repeat(indentLevel) + line.trim() : ''\n      if (line.includes('{')) {\n        indentLevel++\n      }\n      return formatted\n    })\n    .filter(Boolean) // 移除空行\n    .join('\\n')\n}\n\n// 新增参数类型判断函数\nfunction getParameterType(type: string = ''): string {\n  switch (type.toLowerCase()) {\n    case 'string':\n      return 'string'\n    case 'number':\n    case 'integer':\n      return 'number'\n    case 'boolean':\n      return 'boolean'\n    default:\n      return 'any'\n  }\n}\n\nfunction handleInput(e: any) {\n  try {\n    const text = e.target.innerText.trim()\n    if (!text) {\n      return\n    }\n    jsonSchemaStr.value = JSON.parse(text)\n  }\n  catch (error) {\n    console.error('JSON 解析失败:', error)\n    // 可以添加用户提示\n  }\n}\n<\/script>\n\n<template>\n  <div class=\"type-definition-container\">\n    YAPI 接口返回数据（接口返回值粘贴到下方）：\n    <pre\n      contenteditable\n      class=\"pre json-input\"\n      :rows=\"10\"\n      placeholder=\"请输入 JSON 字符串\"\n      @input=\"handleInput\"\n    >{{ JSON.stringify(jsonSchemaStr, null, 2) }}</pre>\n\n    转换后TS类型：\n    <el-form :model=\"yApiForm\">\n      <el-form-item label=\"返回值是否按照规则处理\">\n        <el-switch\n          v-model=\"yApiForm.useDocsDefine\"\n        />\n      </el-form-item>\n    </el-form>\n    <pre\n      class=\"type-definition pre\"\n      contenteditable\n    >{{ jsonSchemaObj }}</pre>\n  </div>\n</template>\n\n<style lang=\"scss\" scoped>\n.type-definition-container {\n  position: relative;\n\n  .pre {\n    height: 300px;\n    border-radius: 4px;\n    padding: 16px;\n    background: #f5f7fa;\n    overflow: auto;\n    max-height: fit-content; // 最大高度为内容高度\n    resize: vertical; // 添加垂直方向的拖拽缩放\n  }\n\n  .type-definition {\n    margin-top: 16px;\n    position: relative;\n    font-family: 'Monaco', 'Menlo', 'Consolas', monospace;\n    font-size: 14px;\n    line-height: 1.5;\n    white-space: pre-wrap;\n    word-break: break-all;\n    color: #2c3e50;\n\n    .copy-button {\n      position: absolute;\n      right: 10px;\n      top: 10px;\n      z-index: 1;\n    }\n  }\n}\n</style>\n")},d({_:2},[q.value?{name:"vue",fn:y(()=>[l(u(q))]),key:"0"}:void 0]),1032,["vueCode"])]),_:1})])}}});export{f as __pageData,q as default};
