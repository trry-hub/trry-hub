import{_ as e,l as a,m as n,S as s}from"./chunks/framework.B9qehBrd.js";const l=JSON.parse('{"title":"vue 环境变量","description":"","frontmatter":{},"headers":[],"relativePath":"src/前端笔记/vue/vue2.x/vue 环境变量.md","filePath":"src/前端笔记/vue/vue2.x/vue 环境变量.md","lastUpdated":1683717698000}');const i=e({name:"src/前端笔记/vue/vue2.x/vue 环境变量.md"},[["render",function(e,l,i,o,t,p){return n(),a("div",null,[...l[0]||(l[0]=[s('<h1 id="vue-环境变量" tabindex="-1">vue 环境变量 <a class="header-anchor" href="#vue-环境变量" aria-label="Permalink to &quot;vue 环境变量&quot;">​</a></h1><ol><li>今天来聊一聊环境变量，老板开了会，说的东西，感觉很深，感觉自己也该开始看书了，每个成功的人都是得有一堆书支撑，这应该就是我得出的结论吧。废话不多说开始！</li></ol><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>.env                # 在所有的环境中被载入</span></span>\n<span class="line"><span>.env.local          # 在所有的环境中被载入，但会被 git 忽略</span></span>\n<span class="line"><span>.env.[mode]         # 只在指定的模式中被载入</span></span>\n<span class="line"><span>.env.[mode].local   # 只在指定的模式中被载入，但会被 git 忽略</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><blockquote><p>这个是环境变量的基本格式，</p></blockquote><ol><li>.env 在所又的环境中都可以被引入</li><li>.env.local 在所有的环境中被载入，但会被git忽略（不会提交到远程仓库）</li><li>.env[mode] 只在指定的模式中被载入， mode 是模式（下面会提到集中模式）</li><li>.env.[mode].local 只在指定的模式中被载入，但会被git忽略</li></ol><p>环境变量中的格式就是 &#39;键=值&#39; 例如：VUE_APP_URL=&#39;www.baidu.com&#39;, 被载入的变量将会对 vue-cli-service 的所有命令、插件和依赖可用。</p><blockquote><h3 id="环境加载属性" tabindex="-1">环境加载属性 <a class="header-anchor" href="#环境加载属性" aria-label="Permalink to &quot;环境加载属性&quot;">​</a></h3></blockquote><p>为一个特定模式准备的环境文件（例如.env.development）将会比一般的环境文件（例如.env）的优先级更高。 注： .env 具体作用我也不知道，全部环境都能用还有必要配么，</p>',8)])])}]]);export{l as __pageData,i as default};
