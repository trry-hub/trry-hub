import{_ as n,l as s,m as a,S as e}from"./chunks/framework.B9qehBrd.js";const p=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"src/前端笔记/js学习记录/for...in 遍历.md","filePath":"src/前端笔记/js学习记录/for...in 遍历.md","lastUpdated":1683717698000}');const l=n({name:"src/前端笔记/js学习记录/for...in 遍历.md"},[["render",function(n,p,l,i,r,t){return a(),s("div",null,[...p[0]||(p[0]=[e('<h2 id="为什么不推荐用for-in遍历数组" tabindex="-1">为什么不推荐用for...in遍历数组 <a class="header-anchor" href="#为什么不推荐用for-in遍历数组" aria-label="Permalink to &quot;为什么不推荐用for...in遍历数组&quot;">​</a></h2><p>程序员黑叔 <em>今天</em></p><p>点击上方“程序员黑叔”，选择“置顶或者星标”</p><p>你的关注意义重大！</p><blockquote><p>转载自：沐码小站</p><p><a href="https://wintc.top/article/49" target="_blank" rel="noreferrer">https://wintc.top/article/49</a></p></blockquote><h2 id="一、for-in引发的一个报错" tabindex="-1">一、for...in引发的一个报错 <a class="header-anchor" href="#一、for-in引发的一个报错" aria-label="Permalink to &quot;一、for...in引发的一个报错&quot;">​</a></h2><p>两年前写的一个文章目录生成插件vue-outline，一直用着没出啥问题（本站的文章目录也是用该插件生成的）。但是最近一个网友在使用的时候却出现了异常报错，异常代码使用了一个for...in遍历数组：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>  for (let idx in selectors) {</span></span>\n<span class="line"><span>    let elementList = dom.querySelectorAll(selectors[idx])</span></span>\n<span class="line"><span>    elementList.forEach(element =&gt; {</span></span>\n<span class="line"><span>      if (element.__nav_except || element.offsetParent === null) return</span></span>\n<span class="line"><span>      element.__nav_level = idx</span></span>\n<span class="line"><span>    })</span></span>\n<span class="line"><span>  }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>代码本意是，通过用户给定的选择器列表selectors确定哪些元素可以提取出来作为标题，比如传一个[&#39;h1&#39;, &#39;h3&#39;, &#39;div.title&#39;]。网友的使用方法完全正确，selectors传递的都是合法的选择器，但是会出现以下报错：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/pfCCZhlbMQRpAia4QpnhiacNT75ibnMY6vuUYIvdge0LMW5wg6MicOhxAnOI65lHP0g3crAgs8R8v0HtmSX0Nib9HkA/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片">img</p><p>一个函数不是一个合法的选择器？selectors里传递的都是选择器。最后这位网友找到了原因，可能和for...in有关系，因为他在数组的原型上添加了一些便捷的方法：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/pfCCZhlbMQRpAia4QpnhiacNT75ibnMY6vuOiccJeRUfDx7nXPaiczcg9gMKEXic9GiagqCEIZSObibvk6dM0KNvqE5cQA/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片">img</p><p>而for...in会遍历出原型上的这些方法，这就导致在执行前面的代码时，把一个函数作为参数传递给了querySelectorAll，导致报错！</p><h2 id="二、for-in细节" tabindex="-1">二、for...in细节 <a class="header-anchor" href="#二、for-in细节" aria-label="Permalink to &quot;二、for...in细节&quot;">​</a></h2><p>for...in本身是Object的遍历方法，JS中的数组也继承自Object，所以自然而然也能使用for...in遍历出属性。然而for...in有一些难以注意到的细节，稍不注意就可能被坑。</p><h4 id="_1-细节一-遍历的的属性值是字符串-而不是数字-相信初接触js的人都要被坑一次吧" tabindex="-1">1. 细节一：遍历的的属性值是字符串，而不是数字！（相信初接触JS的人都要被坑一次吧） <a class="header-anchor" href="#_1-细节一-遍历的的属性值是字符串-而不是数字-相信初接触js的人都要被坑一次吧" aria-label="Permalink to &quot;1. 细节一：遍历的的属性值是字符串，而不是数字！（相信初接触JS的人都要被坑一次吧）&quot;">​</a></h4><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>const list = [1, 2, 3]</span></span>\n<span class="line"><span>for (let i in list) {</span></span>\n<span class="line"><span>    console.log(i, i + 1, typeof i)</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>打印：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>0 01 string</span></span>\n<span class="line"><span>1 11 string</span></span>\n<span class="line"><span>2 21 string</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>可以看到typeof i的返回值是“string”，这个最坑的地方在于我们通过下标加减想取别的元素时，就会出现异常，像上述输出的i + 1一样，并不是数字相加，而是字符串拼接！</p><h4 id="_2-细节二-遍历的是对象的枚举属性-包括自身属性以及原型链上的属性" tabindex="-1">2. 细节二：遍历的是对象的枚举属性，包括自身属性以及原型链上的属性 <a class="header-anchor" href="#_2-细节二-遍历的是对象的枚举属性-包括自身属性以及原型链上的属性" aria-label="Permalink to &quot;2. 细节二：遍历的是对象的枚举属性，包括自身属性以及原型链上的属性&quot;">​</a></h4><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>const obj = {</span></span>\n<span class="line"><span>  a: &#39;value_a&#39;,</span></span>\n<span class="line"><span>  b: &#39;value_b&#39;</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>Object.prototype.c = &#39;proto_value_c&#39;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>Object.defineProperty(obj, &#39;d&#39;, {</span></span>\n<span class="line"><span>  get () { return &#39;value_d&#39; },</span></span>\n<span class="line"><span>  enumerable: false,</span></span>\n<span class="line"><span>})</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>for (let key in obj) {</span></span>\n<span class="line"><span>  console.log(key, obj[key])</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>输出：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>a value_a</span></span>\n<span class="line"><span>b value_b</span></span>\n<span class="line"><span>c proto_value_c</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>可以看到，原型上的属性c也打印出来了，但是通过Object.defineProperty定义的不可枚举属性d（enumerable: false）没有被遍历到。</p><h4 id="_3-细节三-遍历顺序是对象属性的枚举顺序-并不一定按数组的下标顺序遍历" tabindex="-1">3. 细节三：遍历顺序是对象属性的枚举顺序，并不一定按数组的下标顺序遍历 <a class="header-anchor" href="#_3-细节三-遍历顺序是对象属性的枚举顺序-并不一定按数组的下标顺序遍历" aria-label="Permalink to &quot;3. 细节三：遍历顺序是对象属性的枚举顺序，并不一定按数组的下标顺序遍历&quot;">​</a></h4><p>for...in的遍历顺序是枚举顺序，对于数组而言，规范并没有约束各浏览器的实现。因此即便在一定范围内是按顺序遍历的，也应该尽量不依赖for...in遍历的顺序。MDN文档也明确指出，不建议使用for...in遍历数组，特别是想按照索引顺序遍历的时候：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/pfCCZhlbMQRpAia4QpnhiacNT75ibnMY6vuwTuNicGswkeMfugAD1eMicKVLZdCT6acRh1Kd5Wkl8aYXiajkzgYZQUXQ/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片">img</p><p>此外，因为有稀疏数组的存在，其实JS里的数组不一定是顺序结构存储的。当数组的键分布较为稀疏，为了充分节约空间，数组可能会退化为像对象一样的哈希表存储结构。</p><p>因为for...in本身是对象的遍历方法，并不适用于数组，对于数组，还是for...of、for循环、forEach等遍历比较好。</p>',30)])])}]]);export{p as __pageData,l as default};
