import{_ as s,l as n,m as a,S as e}from"./chunks/framework.B9qehBrd.js";const p=JSON.parse('{"title":"Vue事件总线（EventBus）使用详细介绍","description":"","frontmatter":{},"headers":[],"relativePath":"src/前端笔记/vue/vue2.x/EventBus的使用.md","filePath":"src/前端笔记/vue/vue2.x/EventBus的使用.md","lastUpdated":1683728600000}');const l=s({name:"src/前端笔记/vue/vue2.x/EventBus的使用.md"},[["render",function(s,p,l,t,i,c){return a(),n("div",null,[...p[0]||(p[0]=[e('<h1 id="vue事件总线-eventbus-使用详细介绍" tabindex="-1">Vue事件总线（EventBus）使用详细介绍 <a class="header-anchor" href="#vue事件总线-eventbus-使用详细介绍" aria-label="Permalink to &quot;Vue事件总线（EventBus）使用详细介绍&quot;">​</a></h1><p><a href="https://www.zhihu.com/org/mu-ke-wang-14" target="_blank" rel="noreferrer"><img src="https://pic1.zhimg.com/v2-1a7e8b36a7dc94b127c6cea1773ed171_xs.jpg?source=172ae18b" alt="慕课网"></a></p><p><a href="https://www.zhihu.com/org/mu-ke-wang-14" target="_blank" rel="noreferrer">慕课网</a><a href="https://www.zhihu.com/question/48510028" target="_blank" rel="noreferrer"></a></p><p>已认证的官方帐号</p><p>56 人赞同了该文章</p><p><strong>前言</strong></p><p>vue组件非常常见的有父子组件通信，兄弟组件通信。而父子组件通信就很简单，父组件会通过 <code>props</code> 向下传数据给子组件，当子组件有事情要告诉父组件时会通过 <code>$emit</code> 事件告诉父组件。今天就来说说如果两个页面没有任何引入和被引入关系，该如何通信了？</p><p><img src="https://pic4.zhimg.com/v2-b39082ed6c899ea38fcb1012d5903ebb_r.jpg" alt="img"></p><p>如果咱们的应用程序不需要类似Vuex这样的库来处理组件之间的数据通信，就可以考虑Vue中的 <code>事件总线</code> ，即 **<code>EventBus</code>**来通信。</p><p><strong>EventBus的简介</strong></p><p><code>EventBus</code> 又称为事件总线。在Vue中可以使用 <code>EventBus</code> 来作为沟通桥梁的概念，就像是所有组件共用相同的事件中心，可以向该中心注册发送事件或接收事件，所以组件都可以上下平行地通知其他组件，但也就是太方便所以若使用不慎，就会造成难以维护的“灾难”，因此才需要更完善的Vuex作为状态管理中心，将通知的概念上升到共享状态层次。</p><p><strong>如何使用EventBus</strong></p><p><img src="https://pic3.zhimg.com/v2-a6e2f29fb943e5a17a311685e4817cb6_r.jpg" alt="img"></p><p><strong>一、初始化</strong> 首先需要创建事件总线并将其导出，以便其它模块可以使用或者监听它。我们可以通过两种方式来处理。先来看第一种，新创建一个 .js 文件，比如 <code>event-bus.js</code></p><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// event-bus.js</span></span>\n<span class="line"><span>import Vue from &#39;vue&#39;</span></span>\n<span class="line"><span>export const EventBus = new Vue()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>实质上<code>EventBus</code>是一个不具备 <code>DOM</code> 的组件，它具有的仅仅只是它实例方法而已，因此它非常的轻便。</p><p>另外一种方式，可以直接在项目中的 <code>main.js</code> 初始化 <code>EventBus</code> :</p><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// main.js</span></span>\n<span class="line"><span>Vue.prototype.$EventBus = new Vue()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>注意，这种方式初始化的<code>EventBus</code>是一个<code>全局的事件总线</code>。稍后再来聊一聊全局的事件总线。</p><p>现在我们已经创建了 <code>EventBus</code> ，接下来你需要做到的就是在你的组件中加载它，并且调用同一个方法，就如你在父子组件中互相传递消息一样。</p><p><strong>二、发送事件</strong></p><p><img src="https://pic3.zhimg.com/v2-7596bb8669bd3b995171e0b09439afce_r.jpg" alt="img"></p><p>假设你有两个Vue页面需要通信： A 和 B ，A页面 在按钮上面绑定了点击事件，发送一则消息，想=通知 B页面。</p><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;!-- A.vue --&gt;</span></span>\n<span class="line"><span>&lt;template&gt;</span></span>\n<span class="line"><span>    &lt;button @click=&quot;sendMsg()&quot;&gt;-&lt;/button&gt;</span></span>\n<span class="line"><span>&lt;/template&gt;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>&lt;script&gt; </span></span>\n<span class="line"><span>import { EventBus } from &quot;../event-bus.js&quot;;</span></span>\n<span class="line"><span>export default {</span></span>\n<span class="line"><span>  methods: {</span></span>\n<span class="line"><span>    sendMsg() {</span></span>\n<span class="line"><span>      EventBus.$emit(&quot;aMsg&quot;, &#39;来自A页面的消息&#39;);</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>  }</span></span>\n<span class="line"><span>}; </span></span>\n<span class="line"><span>&lt;/script&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>接下来，我们需要在 B页面 中接收这则消息。</p><p><strong>三、接收事件</strong></p><p><img src="https://pic2.zhimg.com/v2-460413596c47645c29e688e1efcdfccd_r.jpg" alt="img"></p><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;!-- IncrementCount.vue --&gt;</span></span>\n<span class="line"><span>&lt;template&gt;</span></span>\n<span class="line"><span>  &lt;p&gt;{{msg}}&lt;/p&gt;</span></span>\n<span class="line"><span>&lt;/template&gt;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>&lt;script&gt; </span></span>\n<span class="line"><span>import { </span></span>\n<span class="line"><span>  EventBus </span></span>\n<span class="line"><span>} from &quot;../event-bus.js&quot;;</span></span>\n<span class="line"><span>export default {</span></span>\n<span class="line"><span>  data(){</span></span>\n<span class="line"><span>    return {</span></span>\n<span class="line"><span>      msg: &#39;&#39;</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>  },</span></span>\n<span class="line"><span>  mounted() {</span></span>\n<span class="line"><span>    EventBus.$on(&quot;aMsg&quot;, (msg) =&gt; {</span></span>\n<span class="line"><span>      // A发送来的消息</span></span>\n<span class="line"><span>      this.msg = msg;</span></span>\n<span class="line"><span>    });</span></span>\n<span class="line"><span>  }</span></span>\n<span class="line"><span>};</span></span>\n<span class="line"><span>&lt;/script&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>同理我们也可以在 B页面 向 A页面 发送消息。这里主要用到的两个方法：</p><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// 发送消息</span></span>\n<span class="line"><span>EventBus.$emit(channel: string, callback(payload1,…))</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>// 监听接收消息</span></span>\n<span class="line"><span>EventBus.$on(channel: string, callback(payload1,…))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>前面提到过，如果使用不善，<code>EventBus</code>会是一种灾难，到底是什么样的<code>“灾难”</code>了？大家都知道vue是单页应用，如果你在某一个页面刷新了之后，与之相关的<code>EventBus</code>会被移除，这样就导致业务走不下去。还要就是如果业务有反复操作的页面，<code>EventBus</code>在监听的时候就会触发很多次，也是一个非常大的隐患。这时候我们就需要好好处理<code>EventBus</code>在项目中的关系。通常会用到，在vue页面销毁时，同时移除<code>EventBus</code>事件监听。</p><p><strong>移除事件监听者</strong></p><p><img src="https://pic1.zhimg.com/v2-cd5627b06af54de5b8722fee76006500_r.jpg" alt="img"></p><p>如果想移除事件的监听，可以像下面这样操作：</p><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>import { </span></span>\n<span class="line"><span>  eventBus </span></span>\n<span class="line"><span>} from &#39;./event-bus.js&#39;</span></span>\n<span class="line"><span>EventBus.$off(&#39;aMsg&#39;, {})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>你也可以使用 <code>EventBus.$off(&#39;aMsg&#39;)</code> 来移除应用内所有对此某个事件的监听。或者直接调用 <code>EventBus.$off()</code> 来移除所有事件频道，不需要添加任何参数 。</p><p>上面就是 <code>EventBus</code> 的使用方法，是不是很简单。上面的示例中我们也看到了，每次使用 <code>EventBus</code> 时都需要在各组件中引入 <code>event-bus.js</code> 。事实上，我们还可以通过别的方式，让事情变得简单一些。那就是创建一个全局的 <code>EventBus</code> 。接下来的示例向大家演示如何在Vue项目中创建一个全局的 <code>EventBus</code> 。</p><p><strong>全局EventBus</strong></p><p>它的工作原理是发布/订阅方法，通常称为 <code>Pub/Sub</code> 。</p><p><strong>创建全局EventBus</strong></p><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>var EventBus = new Vue();</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>Object.defineProperties(Vue.prototype, {</span></span>\n<span class="line"><span>  $bus: {</span></span>\n<span class="line"><span>    get: function () {</span></span>\n<span class="line"><span>      return EventBus</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>  }</span></span>\n<span class="line"><span>})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>在这个特定的总线中使用两个方法<code>$on</code>和<code>$emit</code>。一个用于创建发出的事件，它就是<code>$emit</code>；另一个用于订阅<code>$on</code>：</p><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>var EventBus = new Vue();</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>this.$bus.$emit(&#39;nameOfEvent&#39;, { ... pass some event data ...});</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>this.$bus.$on(&#39;nameOfEvent&#39;,($event) =&gt; {</span></span>\n<span class="line"><span>  // ...</span></span>\n<span class="line"><span>})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>然后我们可以在某个Vue页面使用<code>this.$bus.$emit(&quot;sendMsg&quot;, &#39;我是web秀&#39;);</code>，另一个Vue页面使用</p><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>this.$bus.$on(&#39;updateMessage&#39;, function(value) {</span></span>\n<span class="line"><span>  console.log(value); // 我是web秀</span></span>\n<span class="line"><span>})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>同时也可以使用<code>this.$bus.$off(&#39;sendMsg&#39;)</code>来移除事件监听。</p><p><strong>总结</strong></p><p>本文主要通过简单的实例学习了Vue中有关于 <code>EventBus</code> 相关的知识点。主要涉及了 <code>EventBus</code> 如何实例化，又是如何通过 <code>$emit</code> 发送频道信号，又是如何通过 <code>$on</code> 来接收频道信号。最后简单介绍了如何创建全局的 <code>EventBus</code> 。从实例中我们可以了解到， <code>EventBus</code> 可以较好的实现兄弟组件之间的数据通讯。</p>',48)])])}]]);export{p as __pageData,l as default};
