import{_ as s,l as n,m as a,S as e}from"./chunks/framework.B9qehBrd.js";const p=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"src/前端笔记/vue/vue2.x/Vuex.md","filePath":"src/前端笔记/vue/vue2.x/Vuex.md","lastUpdated":1683717698000}');const l=s({name:"src/前端笔记/vue/vue2.x/Vuex.md"},[["render",function(s,p,l,i,t,r){return a(),n("div",null,[...p[0]||(p[0]=[e('<h2 id="开始" tabindex="-1">开始 <a class="header-anchor" href="#开始" aria-label="Permalink to &quot;开始&quot;">​</a></h2><p>每一个Vuex应用的核心就是store（仓库）。&quot;store&quot;基本上就是一个容器，它包含着你的应用中大部分的<strong>状态（state）</strong>。Vuex和单纯的全局对象有以下两点不同：</p><p>1.Vuex 的状态存储是响应式的。当Vue组件从store中读取状态的时候，若store中的状态发生变化，那么相应的组件也会相应地得到更高效更新。</p><p>2.你不能直接改变 store 中的状态。改变 store 中的状态的唯一途径就是显式地<strong>提交（commit）mutation</strong>。这样使得我们可以方便地跟踪每一个状态的变化，从而让我们能够实现一些工具帮助我们更好地了解我们的应用。</p><h3 id="最简单的-store" tabindex="-1">最简单的 Store <a class="header-anchor" href="#最简单的-store" aria-label="Permalink to &quot;最简单的 Store&quot;">​</a></h3><blockquote><p>安装 Vuex 之后，让我们来创建一个 store。创建过程直接了当——仅需要提供一个初始 state 对象和一些 mutation：</p></blockquote><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>import Vue from &#39;vue&#39;</span></span>\n<span class="line"><span>import Vuex from &#39;vuex&#39;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>Vue.use(Vuex)</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>const store = new Vuex.Store({</span></span>\n<span class="line"><span>    state:{</span></span>\n<span class="line"><span>        count: 0,</span></span>\n<span class="line"><span>    },</span></span>\n<span class="line"><span>    mutations: {</span></span>\n<span class="line"><span>        increment (state) {</span></span>\n<span class="line"><span>            state.count++</span></span>\n<span class="line"><span>        }</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>现在，你可以通过 <code>store.state</code>来获取状态对象，以及通过<code>store.commit</code>方法触发状态变更:</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>store.commit(&#39;increment&#39;)</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>console.log(store.state.count) // -&gt; 1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>为了在Vue组件中访问<code>this.$store</code> property,你需要为Vue实力提供创建好的store。Vuex提供了一个从根组件向所有子组件，以<code>store</code>选项的方式&quot;注入&quot;该store的机制：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>new Vue({</span></span>\n<span class="line"><span>    el:&#39;#app&#39;,</span></span>\n<span class="line"><span>    store: store,</span></span>\n<span class="line"><span>})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>现在我们可以从组件的方法提交一个变更：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>methods: {</span></span>\n<span class="line"><span>    increment() {</span></span>\n<span class="line"><span>        this.$store.commit(&#39;increment&#39;)</span></span>\n<span class="line"><span>        console.log(this.$store.state.count)</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>再次强调，我们通过提交 mutation 的方式，而非直接改变<code>store.state.count</code>,是因为我们想要更明确地追踪到状态的变化。这个简单的约定能够让你的意图更加明显，这样你在阅读代码的时候就更容易的解读应用内部的状态改变。此外，这样也让我们有机会去实现一些能记录每次状态改变，保存状态快照的调试工具。有了它，我们甚至可以实现如时间穿梭般的调试体验。</p><p>由于 store 中的状态是响应式的，在组件中调用 store 中的状态简单到仅需要在计算属性中返回即可。触发变化也仅仅是在组件的 methods 中提交 mutation。</p><p>这是一个<strong>最基本的 Vuex 技数应用</strong>示例。</p><h2 id="state" tabindex="-1">State <a class="header-anchor" href="#state" aria-label="Permalink to &quot;State&quot;">​</a></h2><h3 id="单一状态树" tabindex="-1">单一状态树 <a class="header-anchor" href="#单一状态树" aria-label="Permalink to &quot;单一状态树&quot;">​</a></h3><p>Vuex 使用<strong>单一状态树</strong>——是的，用一个对象就包含了全部的应用层级状态。至此它便作为一个&quot;唯一数据源（SSOT）&quot;而存在。这意味着，每个应用将仅仅包含一个store实例。单一状态树让我们能够直接的定位任一特定的状态片段，在调试的过程中也能轻易的取得整个当前应用状态的快照。</p><p>但状态树和模块化并不冲突——在后面的章节里我们会讨论如何将状态和状态变更事件分布到各个子模块中。</p><p>存储在 Vuex 中的数据和Vue实例中的<code>data</code>遵循相同的规则，例如状态对象必须是纯粹的。</p><h3 id="在vue组件中获得vuex状态" tabindex="-1">在Vue组件中获得Vuex状态 <a class="header-anchor" href="#在vue组件中获得vuex状态" aria-label="Permalink to &quot;在Vue组件中获得Vuex状态&quot;">​</a></h3><p>那么我们如何在Vue组件中展示状态呢？由于Vuex的状态存储是响应式的，从store实例中读取状态最简单的方法就是在<strong>计算属性</strong>中返回某个状态：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// 创建一个 Counter 组件</span></span>\n<span class="line"><span>const Counter = {</span></span>\n<span class="line"><span>    template: `&lt;div&gt; {{ count }}&lt;/div&gt;`,</span></span>\n<span class="line"><span>    computed: {</span></span>\n<span class="line"><span>        count () {</span></span>\n<span class="line"><span>            return store.state.count</span></span>\n<span class="line"><span>        }</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>每当 <code>store.state.count</code>变化的时候，都会重新求取计算属性，并且触发更新相关联的 DOM。</p><p>然而，这种模式导致组件依赖全局状态单例。在模块化的构建系统中，在每个需要使用state的组件中需要频繁的导入，并且在测试组件时需要模拟状态。</p><p>Vuex 通过 <code>store</code>选项，提供了一种机制将状态从根组件&quot;注入&quot;到每一个子组件中（需调用Vue.use(Vuex)）:</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>const app = new Vue({</span></span>\n<span class="line"><span>    el:&#39;#app&#39;,</span></span>\n<span class="line"><span>    // 把 store 对象提供给 &#39;store&#39; 选项，这可以把 store 的实例注入所有的子组件</span></span>\n<span class="line"><span>    store,</span></span>\n<span class="line"><span>    components: { Counter },</span></span>\n<span class="line"><span>    template: `</span></span>\n<span class="line"><span>        &lt;div class=&quot;app&quot;&gt;</span></span>\n<span class="line"><span>            &lt;counter&gt;&lt;/counter&gt;</span></span>\n<span class="line"><span>        &lt;/div&gt;</span></span>\n<span class="line"><span>    `</span></span>\n<span class="line"><span>})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>通过在根实例中注册 <code>store</code> 选项，该store实例会注入到根组件下的所有子组件中，且子组件能通过<code>this.$store</code> 访问到。让我们更新下 <code>Counter</code> 的实现：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>const Counter = {</span></span>\n<span class="line"><span>    template:  `&lt;div&gt;{{ count }}&lt;/div&gt;`,</span></span>\n<span class="line"><span>    computed: {</span></span>\n<span class="line"><span>        count () {</span></span>\n<span class="line"><span>            return this.$store.state.count</span></span>\n<span class="line"><span>        }</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="mapstate辅助函数" tabindex="-1"><code>mapState</code>辅助函数 <a class="header-anchor" href="#mapstate辅助函数" aria-label="Permalink to &quot;```mapState```辅助函数&quot;">​</a></h3><blockquote><p>当一个组件需要获取多个状态的时候，将这些状态都声明为计算属性会有些向重复和冗余。为了解决这个问题，我们可以使用 <code>mapState</code> 辅助函数帮助我们生成计算属性，让你少按几次键：</p></blockquote><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// 在单独构建的版本中辅助函数为 Vuex.mapState</span></span>\n<span class="line"><span>import { mapState } from &#39;vuex&#39;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>export default {</span></span>\n<span class="line"><span>    // ...</span></span>\n<span class="line"><span>    count: state =&gt; state.count,</span></span>\n<span class="line"><span>    </span></span>\n<span class="line"><span>    // 传字符串参数 &#39;count&#39; 等同于 `state =&gt; state.count`</span></span>\n<span class="line"><span>    countAlias: &#39;count&#39;,</span></span>\n<span class="line"><span>    </span></span>\n<span class="line"><span>    // 为了能够使用 `this` 获取局部状态，必须使用常规函数</span></span>\n<span class="line"><span>    countPlusLocalState (state) {</span></span>\n<span class="line"><span>        return state.count + this.localCount</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>当映射的计算属性的名称与 state 的子节点名称相同时，我们也可以给 <code>mapState</code>传一个字符串数组。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>computed: mapState([</span></span>\n<span class="line"><span>    // 映射 this.count 为 store.state.count</span></span>\n<span class="line"><span>    &#39;count&#39;</span></span>\n<span class="line"><span>])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="对象展开运算符" tabindex="-1">对象展开运算符 <a class="header-anchor" href="#对象展开运算符" aria-label="Permalink to &quot;对象展开运算符&quot;">​</a></h4><p><code>mapState</code>函数返回的是一个对象。我们如何将它与局部计算属性混合使用呢？通常，我们需要使用一个工具函数将多个对象合并为一个，以使我们可以将最终对象传给<code>computed</code>属性。但是自从有了对象展开运算符，我们可以极大地简化写法：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>computed: {</span></span>\n<span class="line"><span>    localComputed () { /* ... */},</span></span>\n<span class="line"><span>    // 使用对象展开运算符将此对象混入到外部对象中</span></span>\n<span class="line"><span>    ...mapState({</span></span>\n<span class="line"><span>        // ...</span></span>\n<span class="line"><span>    })</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="组件任然保有局部状态" tabindex="-1">组件任然保有局部状态 <a class="header-anchor" href="#组件任然保有局部状态" aria-label="Permalink to &quot;组件任然保有局部状态&quot;">​</a></h4><p>使用 Vuex 并不意味着你需要将所有的状态存放入 Vuex。虽然将所有的状态放到 Vuex 会使状态变化更显示和易调试，但也会使代码变得冗长和不直观。如果有些状态严格属于单个组件，最好还是作为组件的局部状态。你应该根据你的应用开发需要进行权衡和确定。</p><h2 id="getter" tabindex="-1">Getter <a class="header-anchor" href="#getter" aria-label="Permalink to &quot;Getter&quot;">​</a></h2><p>有时候我们需要从 store 中派生出一些状态，例如对列表惊醒过滤并计数：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>computed: {</span></span>\n<span class="line"><span>    doneTodosCount () {</span></span>\n<span class="line"><span>        return this.$store.state.todos.filter(todo =&gt; todo.done).length</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>如果有多个组件需要用到此属性，我们要么复制这个函数，或者抽取到一个共享函数然后在多处导入它——无论哪种方式都不是很理想。</p><p>Vuex 允许我们在store中定义 &quot;getter&quot; （可以认为是 store 的计算属性）。就像计算属性一样，getter 的返回值会根据它的依赖被缓存起来，且只是当它的依赖值发生了改变才会被重新计算。</p><p>Getter 接受 state 作为其第一个参数：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>const store = new Vuex.Store({</span></span>\n<span class="line"><span>    state: {</span></span>\n<span class="line"><span>        todos: [</span></span>\n<span class="line"><span>        {id: 1, text: &#39;...&#39;,done: true},</span></span>\n<span class="line"><span>        {id: 2, text: &#39;...&#39;,done: false}</span></span>\n<span class="line"><span>        ]</span></span>\n<span class="line"><span>    },</span></span>\n<span class="line"><span>    getters: {</span></span>\n<span class="line"><span>        doneTodos: state =&gt; {</span></span>\n<span class="line"><span>            return state.todos.filter(todo =&gt; todo.done)</span></span>\n<span class="line"><span>        }</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="通过属性访问" tabindex="-1">通过属性访问 <a class="header-anchor" href="#通过属性访问" aria-label="Permalink to &quot;通过属性访问&quot;">​</a></h3><p>Getter 会暴露为 <code>store.getters</code>对象，你可以以属性的形式访问这些值：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>store.getters.doneTodos // -&gt; [{ id: 1,text: &#39;...&#39;, done: true }]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Getter 也可以接受其他 getter 作为第二个参数：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>getters: {</span></span>\n<span class="line"><span>    // ...</span></span>\n<span class="line"><span>    doneTodosCount: (state, getters) =&gt; {</span></span>\n<span class="line"><span>        return getters.doneTodos.length</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>store.getters.doneTodosCount // -&gt; 1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>我们可以很容易地在任何组件中使用它：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>computed: {</span></span>\n<span class="line"><span>    doneTodosCount () {</span></span>\n<span class="line"><span>        return this.$store.getters.doneTodosCount</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>注意，getter 在通过属性访问时是作为 Vue 的响应式系统的一部分缓存其中的。</p><h3 id="通过方法访问" tabindex="-1">通过方法访问 <a class="header-anchor" href="#通过方法访问" aria-label="Permalink to &quot;通过方法访问&quot;">​</a></h3><p>你也可以通过让 getter 返回一个函数，来实现给 getter 传参。在你对 store 里的数组进行查询时非常有用。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>getters: {</span></span>\n<span class="line"><span>    // ...</span></span>\n<span class="line"><span>    getTodoById: (state) =&gt; (id) =&gt; {</span></span>\n<span class="line"><span>        return state.todos.find(todo =&gt; todo.id === id)</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>store.getters.getTodoById(2) // -&gt; { id: 2, text: &#39;...&#39;,done: false }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>注意，getter 在通过方法访问时，每次都会去进行调用，而不会缓存结果。</p><h3 id="mapgetters-辅助函数" tabindex="-1"><code>mapGetters</code> 辅助函数 <a class="header-anchor" href="#mapgetters-辅助函数" aria-label="Permalink to &quot;```mapGetters``` 辅助函数&quot;">​</a></h3><p><code>mapGetters</code> 辅助函数仅仅是将 store 中的 getter 映射到局部计算属性：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>import { mapGetters } from &#39;vuex&#39;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>export default {</span></span>\n<span class="line"><span>    // ...</span></span>\n<span class="line"><span>    computed: {</span></span>\n<span class="line"><span>        // 使用对象展开运算符将 getter 混入 computed 对象中</span></span>\n<span class="line"><span>        ... mapGetters([</span></span>\n<span class="line"><span>        &#39;doneTodosCount&#39;,</span></span>\n<span class="line"><span>        &#39;anotherGetter&#39;,</span></span>\n<span class="line"><span>        // ...</span></span>\n<span class="line"><span>        ])</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>如果你想将一个 getter 属性领取一个名字，使用对象形式：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>...mapGetters({</span></span>\n<span class="line"><span>    // 把 `this.doneCount` 映射为 `this.$store.getters.doneTodosCount`</span></span>\n<span class="line"><span>    doneCount: &#39;doneTodosCount&#39;</span></span>\n<span class="line"><span>})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="mutation" tabindex="-1">Mutation <a class="header-anchor" href="#mutation" aria-label="Permalink to &quot;Mutation&quot;">​</a></h2><p>更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。 Vuex 中的 mutation 非常类似于事件：每个mutation 都有一个子字符串的 <strong>事件类型（type）<strong>和一个</strong>回调调函数（handler）</strong>。这个回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>const store = new Vuex.Store({</span></span>\n<span class="line"><span>    state: {</span></span>\n<span class="line"><span>        count: 1</span></span>\n<span class="line"><span>    },</span></span>\n<span class="line"><span>    mutations: {</span></span>\n<span class="line"><span>        increment (state) {</span></span>\n<span class="line"><span>            // 变更状态</span></span>\n<span class="line"><span>            state.count++</span></span>\n<span class="line"><span>        }</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>你不能直接调用一个 mutation handler。这个选项更像是事件注册：&quot;当触发一个类型为<code>increment</code>的 mutation 时，调用此函数。&quot;要唤醒一个mutation handler，你需要以相应的type调用stroe.commit方法：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>store.commit(&#39;increment&#39;)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="提交载荷-payload" tabindex="-1">提交载荷（Payload） <a class="header-anchor" href="#提交载荷-payload" aria-label="Permalink to &quot;提交载荷（Payload）&quot;">​</a></h3><p>你可以向<code>store.commit</code>传入额外的参数，即 mutation的<strong>载荷（payload）</strong></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// ...</span></span>\n<span class="line"><span>mutations: {</span></span>\n<span class="line"><span>    increment (state, n) {</span></span>\n<span class="line"><span>        state.count += n</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>store.commit(&#39;increment&#39;, 10)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>在大多数情况下，载荷应该是一个对象，这样可以包含多个字段病且记录的mutation会更易读：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// ...</span></span>\n<span class="line"><span>mutations: {</span></span>\n<span class="line"><span>    increment (state, payload) {</span></span>\n<span class="line"><span>        state.count += payload.amount</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>store.commit(&#39;increment&#39;, {</span></span>\n<span class="line"><span>    amount: 10</span></span>\n<span class="line"><span>})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="对象风格的提交方式" tabindex="-1">对象风格的提交方式 <a class="header-anchor" href="#对象风格的提交方式" aria-label="Permalink to &quot;对象风格的提交方式&quot;">​</a></h3><p>提交 mutation 的另一种方式是直接使用包含 <code>type</code>属性的对象：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>store.commit({</span></span>\n<span class="line"><span>    type: &#39;increment&#39;,</span></span>\n<span class="line"><span>    amount: 10</span></span>\n<span class="line"><span>})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>当使用对象风格的提交方式，整个对象都作为载荷穿给 mutation 函数，因此 handler 保持不变：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>mutations: {</span></span>\n<span class="line"><span>    increment (state, payload) {</span></span>\n<span class="line"><span>        state.count += payload.amount</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="mutation-需遵守-vue-的响应规则" tabindex="-1">Mutation 需遵守 Vue 的响应规则 <a class="header-anchor" href="#mutation-需遵守-vue-的响应规则" aria-label="Permalink to &quot;Mutation 需遵守 Vue 的响应规则&quot;">​</a></h3><p>既然 Vuex 的 store 中的状态是响应式的，那么当我们变更状态时，监视状态的Vue组件也会自动更新。这也意味着Vuex中的mutation 也需要使用 Vue 一样遵守一些注意事项：</p><ol><li>最好提前在你的store中初始化好所有所需属性。</li><li>当需要在对象上添加新属性时，你应该</li></ol><ul><li>使用<code>Vue.set(obj, &#39;newProp&#39;, 123)</code>，或者</li><li>以新对象替换老对象。例如，利用对象展开运算符我们可以这样写：</li></ul><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>state.obj = { ...state.obj, newProp: 123 }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="使用常量替代-mutation-事件类型" tabindex="-1">使用常量替代 Mutation 事件类型 <a class="header-anchor" href="#使用常量替代-mutation-事件类型" aria-label="Permalink to &quot;使用常量替代 Mutation 事件类型&quot;">​</a></h3><p>使用常量替代 mutation 事件类型在各种 Flux 实现中是很常见的模式。这样可以使用 linter 之类的工具发挥作用，同时把这些常量放在单独的文件中可以让你的代码合作者对整个 app 包含的 mutation 一目了然：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// mutation-types.js</span></span>\n<span class="line"><span>export const SOME_MUTATION = &#39;SOME_MUTATION&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// store.js</span></span>\n<span class="line"><span>import Vuex from &#39;vuex&#39;</span></span>\n<span class="line"><span>import { SOME_MUTATIOON } from &#39;./mutation-types&#39;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>const store = new Vuex.Store({</span></span>\n<span class="line"><span>    state: { ... },</span></span>\n<span class="line"><span>    mutatuons: {</span></span>\n<span class="line"><span>        // 我们可以使用 ES2015 风格的计算属性命名功能来使用一个常量作为函数名</span></span>\n<span class="line"><span>        [SOME_MUTATION] (state) {</span></span>\n<span class="line"><span>            // mutate state</span></span>\n<span class="line"><span>        }</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>用不用常量取决于你——在需要多人协作的大型项目中，这会很有帮助。但如果你不喜欢，你完全可以不这样做。</p><h3 id="mutation-必须是同步函数" tabindex="-1">Mutation 必须是同步函数 <a class="header-anchor" href="#mutation-必须是同步函数" aria-label="Permalink to &quot;Mutation 必须是同步函数&quot;">​</a></h3><p>一条重要的原则就是要记住 <strong>mutation 必须是同步函数</strong>。为什么？请参考下面的例子：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>mutations: {</span></span>\n<span class="line"><span>    someMutation (state) {</span></span>\n<span class="line"><span>        api.callAsyncMethod(() =&gt; {</span></span>\n<span class="line"><span>            state.count++</span></span>\n<span class="line"><span>        })</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>现在想象，我们正在 debug 一个 app 并且观察 debtool 中的 mutation 日志。 每一条 mutation 被记录，devtools 都需要捕捉到前一状态和后一状态的快照。然而，在上面的例子中 mutation 中的异步函数中的回调让着不可能完成：因为当 mutation 触发的时候，回调函数还没有被调用，devtools 不知道什么时候回调函数实际上被调用——实质上任何在回调函数中进行的状态的改变都是不可追踪的。</p><h3 id="在组件中提交-mutatiion" tabindex="-1">在组件中提交 Mutatiion <a class="header-anchor" href="#在组件中提交-mutatiion" aria-label="Permalink to &quot;在组件中提交 Mutatiion&quot;">​</a></h3><p>你可以在组件中使用 <code>this.$store.commit(&#39;xxx&#39;)</code>提交mutation，或者使用 <code>mapMutations</code> 辅助函数将组件中的methods映射为 <code>store.commit</code> 调用（需要在根节点注入<code>store</code>）。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>import { mapMutations } from &#39;vuex&#39;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>export default {</span></span>\n<span class="line"><span>    // ...</span></span>\n<span class="line"><span>    methods: {</span></span>\n<span class="line"><span>        ...mapMutations({</span></span>\n<span class="line"><span>            &#39;increment&#39;,</span><span> // 将`this.increment()`映射为`this.$store.commit(&#39;increment&#39;)`</span></span>\n<span class="line"><span>            </span></span>\n<span class="line"><span>            //`mapMutations` 也支持载荷：</span></span>\n<span class="line"><span>            &#39;incrementBy&#39;</span><span> // 将 `this.incrementBy(amount)`映射为`this.$store.commit(&#39;incrementBy&#39;, amount)`</span></span>\n<span class="line"><span>        }),</span></span>\n<span class="line"><span>        ...mapMutations({</span></span>\n<span class="line"><span>            add: &#39;increment&#39; // 将` this.add() `映射为 `this.$store.commit(&#39;increment&#39;)`</span></span>\n<span class="line"><span>        })</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h3 id="下一步-action" tabindex="-1">下一步：Action <a class="header-anchor" href="#下一步-action" aria-label="Permalink to &quot;下一步：Action&quot;">​</a></h3><p>在 mutation 中混合异步调用会导致你的程序很难调试。例如，当你调用了两个包含异步回调的 mutation 来改变状态，你怎么知道什么时候回调和哪个先回调呢？这就是为什么我们要区分这两个概念。在Vuex中，<strong>mutation都是同步事务</strong>：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>store.commit(&#39;increment&#39;)</span></span>\n<span class="line"><span>// 任何由 &#39;increment&#39; 导致的状态变更都应该在此刻完成。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',103)])])}]]);export{p as __pageData,l as default};
