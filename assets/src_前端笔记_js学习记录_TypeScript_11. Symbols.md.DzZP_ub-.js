import{_ as s,l as a,m as i,S as e}from"./chunks/framework.B9qehBrd.js";const n=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"src/前端笔记/js学习记录/TypeScript/11. Symbols.md","filePath":"src/前端笔记/js学习记录/TypeScript/11. Symbols.md","lastUpdated":1683717698000}');const l=s({name:"src/前端笔记/js学习记录/TypeScript/11. Symbols.md"},[["render",function(s,n,l,p,t,h){return i(),a("div",null,[...n[0]||(n[0]=[e('<h2 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h2><p>自ECMAScript 2015起，<code>symbol</code> 成为了一种新的原生类型，就像<code>number</code>和<code>string</code>一样。</p><p><code>symbol</code>类型的值是通过<code>Symbol</code>构造函数创建的。</p><div class="language-TypeScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">TypeScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> syml </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sym2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;key&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 可选的字符串 key</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Symbols是不可改变且唯一的。</p><div class="language-TypeScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">TypeScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sym2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;key&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sym3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;key&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sym2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sym3;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// false, symbols是唯一的</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>像字符串一样，symbols也可以被用做对象属性的键。</p><div class="language-TypeScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">TypeScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sym </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [sym]: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;value&quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ogj[sym]); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;value&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Symbols也可以与计算出的属性名声明相结合来声明对象的属性和类成员。</p><div class="language-TypeScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">TypeScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> getClassNameSymbol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> C</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [getClassNameSymbol](){</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;C&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> C</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> className </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c[getClassNameSymbol](); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;C&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="中所周知的symbols" tabindex="-1">中所周知的Symbols <a class="header-anchor" href="#中所周知的symbols" aria-label="Permalink to &quot;中所周知的Symbols&quot;">​</a></h2><p>除了用户定义的symbols，还有一些已经众所周知的内置symbols。内置symbols用来表示语言内部的行为。</p><p>以下为这些symbols的列表：</p><h3 id="symbol-hasinstance" tabindex="-1"><code>Symbol.hasInstance</code> <a class="header-anchor" href="#symbol-hasinstance" aria-label="Permalink to &quot;`Symbol.hasInstance`&quot;">​</a></h3><p>方法，会被<code>instanceof</code>运算符调用。构造器对象用来识别一个对象是否是其实例。</p><h3 id="symbol-isconcatspreadable" tabindex="-1"><code>Symbol.isConcatSpreadable</code> <a class="header-anchor" href="#symbol-isconcatspreadable" aria-label="Permalink to &quot;`Symbol.isConcatSpreadable`&quot;">​</a></h3><p>布尔值，表示当在一个对象上调用<code>Array.prororype.concat</code>时，这个对象的数组元素是否可展开。</p><h3 id="symbol-iterator" tabindex="-1"><code>Symbol.iterator</code> <a class="header-anchor" href="#symbol-iterator" aria-label="Permalink to &quot;`Symbol.iterator`&quot;">​</a></h3><p>方法，被<code>for-of</code>语句调用。返回对象的默认迭代器。</p><h3 id="symbol-match" tabindex="-1"><code>Symbol.match</code> <a class="header-anchor" href="#symbol-match" aria-label="Permalink to &quot;`Symbol.match`&quot;">​</a></h3><p>方法，被<code>String.prototype.match</code>调用。正则表达式用来替换字符串中匹配的子串。</p><h3 id="symbol-replace" tabindex="-1"><code>Symbol.replace</code> <a class="header-anchor" href="#symbol-replace" aria-label="Permalink to &quot;`Symbol.replace`&quot;">​</a></h3><p>方法，被<code>String.prototype.search</code>调用。正则表达式返回被匹配部分在字符串中的索引。</p><h3 id="symbol-search" tabindex="-1"><code>Symbol.search</code> <a class="header-anchor" href="#symbol-search" aria-label="Permalink to &quot;`Symbol.search`&quot;">​</a></h3><p>方法，被<code>String.prototype.search</code>调用。正则表达式返回匹配部分在字符串中的索引。</p><h3 id="symbol-species" tabindex="-1"><code>Symbol.species</code> <a class="header-anchor" href="#symbol-species" aria-label="Permalink to &quot;`Symbol.species`&quot;">​</a></h3><p>函数值，为一个构造函数。用来创建派生对象。</p><h3 id="symbol-split" tabindex="-1"><code>Symbol.split</code> <a class="header-anchor" href="#symbol-split" aria-label="Permalink to &quot;`Symbol.split`&quot;">​</a></h3><p>方法，被<code>String.prototype.split</code>调用。正则表达式用来分割字符串。</p><h3 id="symbol-toprimitive" tabindex="-1"><code>Symbol.toPrimitive</code> <a class="header-anchor" href="#symbol-toprimitive" aria-label="Permalink to &quot;`Symbol.toPrimitive`&quot;">​</a></h3><p>方法，被<code>ToPrimitive</code>抽象操作调用。把对象装换为响应的原始值。</p><h3 id="symbol-tostringtag" tabindex="-1"><code>Symbol.toStringTag</code> <a class="header-anchor" href="#symbol-tostringtag" aria-label="Permalink to &quot;`Symbol.toStringTag`&quot;">​</a></h3><p>方法，被内置方法<code>Object.prototype.toString</code>调用。返回创建对象时默认的字符串描述。</p><h3 id="symbol-unscopables" tabindex="-1"><code>Symbol.unscopables</code> <a class="header-anchor" href="#symbol-unscopables" aria-label="Permalink to &quot;`Symbol.unscopables`&quot;">​</a></h3><p>对象，它自己拥有的属性会被<code>with</code>作用域排除在外。</p>',35)])])}]]);export{n as __pageData,l as default};
