import{_ as a,l as s,m as n,S as e}from"./chunks/framework.B9qehBrd.js";const l=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"src/前端笔记/js学习记录/node.js学习之路/Node学习day01—认识node和简单读写文件.md","filePath":"src/前端笔记/js学习记录/node.js学习之路/Node学习day01—认识node和简单读写文件.md","lastUpdated":1683717698000}');const i=a({name:"src/前端笔记/js学习记录/node.js学习之路/Node学习day01—认识node和简单读写文件.md"},[["render",function(a,l,i,p,r,t){return n(),s("div",null,[...l[0]||(l[0]=[e('<h3 id="目录" tabindex="-1">目录 <a class="header-anchor" href="#目录" aria-label="Permalink to &quot;目录&quot;">​</a></h3><hr><ul><li>认识 node <ul><li>node 是什么</li><li>应用场景</li><li>node 语法使用 <ul><li>ES5、ES6</li><li>node 核心模块</li><li>引入第三方模块</li><li>用户自定义模块</li></ul></li><li>环境安装</li><li>使用 node 执行的第一个脚本</li><li>使用 node 读写文件 <ul><li>使用 node 写入文件</li><li>使用 node 读取文件</li></ul></li></ul></li></ul><h3 id="认识-node" tabindex="-1">认识 node <a class="header-anchor" href="#认识-node" aria-label="Permalink to &quot;认识 node&quot;">​</a></h3><hr><p><code>Node</code> 是一个针对网络应用开发的平台，是利用 Google 的 JavaScript 运行是引擎 V8（可以解析和执行 JavaScript）打造的一个 JavaScript 在服务端的运行环境。</p><h4 id="node-是什么" tabindex="-1">node 是什么 <a class="header-anchor" href="#node-是什么" aria-label="Permalink to &quot;node 是什么&quot;">​</a></h4><ul><li>Node不是一门语言。Node 是一个构建于 Chrome JavaScript V8解析引擎之上的一个 JavaScript 运行时（环境）。</li><li>Node 可以解析和执行 JavaScript 代码 <ul><li>Ecmascript ，基本的 JavaScript 语法及API</li><li>没有 window、document 之类的 DOM、BOM 元素</li><li>Node 类似与浏览器，是一个解析执行 js 环境，虽然不处理 UI，但是在该平台中为 js 提供了一系列的编程接口</li></ul></li><li>npm 不仅仅可以用来下载 node ，还可以用来方便管理和维护第三方包的相关的一些资源包，也可以用来下载浏览器环境相关的一些资源包（Ployfill，Hack）</li></ul><h4 id="应用场景" tabindex="-1">应用场景 <a class="header-anchor" href="#应用场景" aria-label="Permalink to &quot;应用场景&quot;">​</a></h4><ul><li>网站服务器</li><li>网络爬虫</li><li>JSON API</li><li>网络游戏服务器</li><li>命令行工具</li></ul><h4 id="node-语法使用" tabindex="-1">node 语法使用 <a class="header-anchor" href="#node-语法使用" aria-label="Permalink to &quot;node 语法使用&quot;">​</a></h4><h4 id="es5、es6" tabindex="-1">ES5、ES6 <a class="header-anchor" href="#es5、es6" aria-label="Permalink to &quot;ES5、ES6&quot;">​</a></h4><h4 id="node-核心模块" tabindex="-1">node 核心模块 <a class="header-anchor" href="#node-核心模块" aria-label="Permalink to &quot;node 核心模块&quot;">​</a></h4><p>Node 把绝大多数的 API 都封装到了一个具名的核心模块中，每一个模块就是处理一系列功能的 API 集合，每个模块都有一个唯一表示名称进行暴露，我们使用的时候需要进行单独的加载。</p><p>例如文件操作的： <code>fs</code>,网络操作的<code>http</code>等，如果要使用，需要先加载模块。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// 用户自定义变量名 = require(&#39;唯一的核心模块表示名称&#39;)</span></span>\n<span class="line"><span>var fs = require(&#39;fs&#39;)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h5 id="引入第三方模块" tabindex="-1">引入第三方模块 <a class="header-anchor" href="#引入第三方模块" aria-label="Permalink to &quot;引入第三方模块&quot;">​</a></h5><p>第三个模块由 npm 社区提供，我们在使用的时候：</p><ol><li>使用 npm 下载指定的模块</li></ol><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>npm install moment</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="2"><li>通过 require 进行引用</li></ol><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>var moment = require(&#39;moment&#39;)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="3"><li>查看第三方的 API 进行使用</li></ol><p><a href="https://momentjs.com/docs/" target="_blank" rel="noreferrer">momentjs 的官方文档</a></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>console.log(moment().format())</span></span>\n<span class="line"><span>console.log(moment().format(&#39;YYYY-MM-DD HH:mm:ss&#39;))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h5 id="用户自定义模块" tabindex="-1">用户自定义模块 <a class="header-anchor" href="#用户自定义模块" aria-label="Permalink to &quot;用户自定义模块&quot;">​</a></h5><p>Node 基于 CommonJS 模块规范实现了自己的一套 JavaScript 模块解决方案，其核心 API 为下面三个</p><ul><li>require</li><li>module</li><li>exports</li></ul><h5 id="环境安装" tabindex="-1">环境安装 <a class="header-anchor" href="#环境安装" aria-label="Permalink to &quot;环境安装&quot;">​</a></h5><p><a href="https://nodejs.org/en/download/" target="_blank" rel="noreferrer">Node 官网下载</a></p><p>下载 --&gt; 下一步安装 --&gt; 完成</p><p>验证</p><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">node </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">v</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">node </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">version</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">npm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">v</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">npm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">version</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="使用-node-执行的第一个脚本" tabindex="-1">使用 node 执行的第一个脚本 <a class="header-anchor" href="#使用-node-执行的第一个脚本" aria-label="Permalink to &quot;使用 node 执行的第一个脚本&quot;">​</a></h4><p>1、创建一个 helloworld 的js文件 2、在js里面写一行代码</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>console.log(&#39;hello nodejs&#39;);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>3、在本文件目录下执行</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>node helloworld.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="使用-node-读取文件" tabindex="-1">使用 node 读取文件 <a class="header-anchor" href="#使用-node-读取文件" aria-label="Permalink to &quot;使用 node 读取文件&quot;">​</a></h4><h5 id="使用-node-写入文件" tabindex="-1">使用 node 写入文件 <a class="header-anchor" href="#使用-node-写入文件" aria-label="Permalink to &quot;使用 node 写入文件&quot;">​</a></h5><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// 引入node的文件操作fs核心模块</span></span>\n<span class="line"><span>var fs = require(&#39;fs&#39;)</span></span>\n<span class="line"><span>// 定义需要写入的字符串</span></span>\n<span class="line"><span>var data = &#39;hello nodejs&#39;</span></span>\n<span class="line"><span>// 使用writeFile API，传入写入路径，需要写入的内容，接收回掉返回错误信息</span></span>\n<span class="line"><span>fs.writeFile(&#39;./data/hello.text&#39;,data,function(err) {</span></span>\n<span class="line"><span>    // 如果错误抛出错误，组止下面代码执行，</span></span>\n<span class="line"><span>    // 这里使用 throw 抛出错误，原因是可能写入错误的原因可能有很多种</span></span>\n<span class="line"><span>    // 可能是文件只读权限，可能是写入失败，throw 可以确定文件写入失败的原因</span></span>\n<span class="line"><span>    if(err) {</span></span>\n<span class="line"><span>        throw err</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>    // 如果成功执行下面代码</span></span>\n<span class="line"><span>    console.log(&#39;write succeed!&#39;)</span></span>\n<span class="line"><span>})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h5 id="使用-node-读取文件-1" tabindex="-1">使用 node 读取文件 <a class="header-anchor" href="#使用-node-读取文件-1" aria-label="Permalink to &quot;使用 node 读取文件&quot;">​</a></h5><p>我们读取一下刚才我们写好的文件</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// 引入 node 的文件操作fs核心模块</span></span>\n<span class="line"><span>var fs = require(&#39;fs&#39;)</span></span>\n<span class="line"><span>// 使用readFile API，传入读取路径，指定格式，接收回调</span></span>\n<span class="line"><span>// 第一个参数一定是 err ，第二个参数是读取的文件内容</span></span>\n<span class="line"><span>fs.readFile(&#39;./data/hello.text&#39;, &#39;utf8&#39;,function(err, data){</span></span>\n<span class="line"><span>    // 如果有错误，抛出错误，阻止下面代码的执行，也可以使用return</span></span>\n<span class="line"><span>    if(err) {</span></span>\n<span class="line"><span>        throw err</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>    console.log(data)</span></span>\n<span class="line"><span>})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>如果不加第二个 utf8 这个参数，那么默认是加载16进制的 Buffer 对象。我们如果想要输入字符串，需要手动对返回的data进行转换，toString()的默认参数就是 utf8。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// 引入 node 的文件操作fs核心模块</span></span>\n<span class="line"><span>var fs = require(&#39;fs&#39;)</span></span>\n<span class="line"><span>// 使用readFile API, 传入读取路径，指定格式，接收回调</span></span>\n<span class="line"><span>// 第一个参数一定是err，第二个参数是读取的文件内容</span></span>\n<span class="line"><span>fs.readFile(&#39;./data/hello.text&#39;,function(err,data){</span></span>\n<span class="line"><span>    // 如果有错误，抛出错误，阻止下面代码的执行，也可以使用return</span></span>\n<span class="line"><span>    if(err) {</span></span>\n<span class="line"><span>        throw err</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>    console.log(data)</span></span>\n<span class="line"><span>    console.log(data.toString())</span></span>\n<span class="line"><span>    console.log(data.toString(&#39;utf8&#39;))</span></span>\n<span class="line"><span>})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div>',46)])])}]]);export{l as __pageData,i as default};
