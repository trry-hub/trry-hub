import{_ as a,l as i,m as s,S as l}from"./chunks/framework.B9qehBrd.js";const n=JSON.parse('{"title":"从 VS Code 迁移到 Cursor 指南","description":"","frontmatter":{},"headers":[],"relativePath":"src/IDE/vscode 迁移到 cursor.md","filePath":"src/IDE/vscode 迁移到 cursor.md","lastUpdated":1744942641000}');const e=a({name:"src/IDE/vscode 迁移到 cursor.md"},[["render",function(a,n,e,t,r,h){return s(),i("div",null,[...n[0]||(n[0]=[l('<h1 id="从-vs-code-迁移到-cursor-指南" tabindex="-1">从 VS Code 迁移到 Cursor 指南 <a class="header-anchor" href="#从-vs-code-迁移到-cursor-指南" aria-label="Permalink to &quot;从 VS Code 迁移到 Cursor 指南&quot;">​</a></h1><h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h2><p>Cursor 是一个基于 VS Code 的现代化代码编辑器，集成了强大的 AI 功能。本指南将帮助你顺利地从 VS Code 迁移到 Cursor，并充分利用其新特性。</p><h2 id="为什么选择-cursor" tabindex="-1">为什么选择 Cursor？ <a class="header-anchor" href="#为什么选择-cursor" aria-label="Permalink to &quot;为什么选择 Cursor？&quot;">​</a></h2><ul><li>内置强大的 AI 助手功能</li><li>与 VS Code 相似的界面和操作方式</li><li>支持 VS Code 的大部分插件</li><li>更智能的代码补全和重构建议</li><li>优化的性能和响应速度</li></ul><h2 id="迁移步骤" tabindex="-1">迁移步骤 <a class="header-anchor" href="#迁移步骤" aria-label="Permalink to &quot;迁移步骤&quot;">​</a></h2><h3 id="_1-下载和安装" tabindex="-1">1. 下载和安装 <a class="header-anchor" href="#_1-下载和安装" aria-label="Permalink to &quot;1. 下载和安装&quot;">​</a></h3><ol><li>访问 <a href="https://cursor.sh" target="_blank" rel="noreferrer">Cursor 官网</a></li><li>下载适合你操作系统的版本</li><li>按照安装向导完成安装</li></ol><h3 id="_2-设置迁移" tabindex="-1">2. 设置迁移 <a class="header-anchor" href="#_2-设置迁移" aria-label="Permalink to &quot;2. 设置迁移&quot;">​</a></h3><ul><li>快捷键设置与 VS Code 保持一致</li><li>可以导入 VS Code 的用户设置</li><li>主题和配色方案可以继续使用</li></ul><h3 id="_3-插件迁移" tabindex="-1">3. 插件迁移 <a class="header-anchor" href="#_3-插件迁移" aria-label="Permalink to &quot;3. 插件迁移&quot;">​</a></h3><ul><li>Cursor 支持大多数 VS Code 插件</li><li>常用插件推荐： <ul><li>GitLens</li><li>ESLint</li><li>Prettier</li><li>Live Share</li><li>Remote Development</li></ul></li></ul><h3 id="_4-代码片段迁移" tabindex="-1">4. 代码片段迁移 <a class="header-anchor" href="#_4-代码片段迁移" aria-label="Permalink to &quot;4. 代码片段迁移&quot;">​</a></h3><h4 id="方法一-直接复制" tabindex="-1">方法一：直接复制 <a class="header-anchor" href="#方法一-直接复制" aria-label="Permalink to &quot;方法一：直接复制&quot;">​</a></h4><ol><li>在 VS Code 中打开代码片段文件 <ul><li>Windows/Linux: <code>%APPDATA%\\Code\\User\\snippets</code></li><li>macOS: <code>~/Library/Application Support/Code/User/snippets</code></li></ul></li><li>复制所有 <code>.json</code> 文件</li><li>在 Cursor 中粘贴到相同位置 <ul><li>Windows/Linux: <code>%APPDATA%\\Cursor\\User\\snippets</code></li><li>macOS: <code>~/Library/Application Support/Cursor/User/snippets</code></li></ul></li></ol><h4 id="方法二-手动迁移" tabindex="-1">方法二：手动迁移 <a class="header-anchor" href="#方法二-手动迁移" aria-label="Permalink to &quot;方法二：手动迁移&quot;">​</a></h4><ol><li>在 Cursor 中打开命令面板（Ctrl/Cmd + Shift + P）</li><li>输入 &quot;Snippets: Configure User Snippets&quot;</li><li>选择要创建的语言</li><li>将 VS Code 中的代码片段复制到新文件中</li></ol><h4 id="方法三-使用设置同步" tabindex="-1">方法三：使用设置同步 <a class="header-anchor" href="#方法三-使用设置同步" aria-label="Permalink to &quot;方法三：使用设置同步&quot;">​</a></h4><ol><li>在 VS Code 中启用设置同步</li><li>在 Cursor 中登录相同的账号</li><li>启用设置同步功能</li><li>等待同步完成</li></ol><h4 id="代码片段格式示例" tabindex="-1">代码片段格式示例 <a class="header-anchor" href="#代码片段格式示例" aria-label="Permalink to &quot;代码片段格式示例&quot;">​</a></h4><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;React Function Component&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;prefix&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;rfc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;body&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;import React from &#39;react&#39;;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;interface ${1:ComponentName}Props {&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;  $2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;export const ${1:ComponentName}: React.FC&lt;${1:ComponentName}Props&gt; = (props) =&gt; {&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;  return (&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;    &lt;div&gt;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;      $0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;    &lt;/div&gt;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;  );&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;};&quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;description&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;React Function Component with TypeScript&quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h4 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h4><ul><li>确保代码片段格式正确</li><li>检查语言标识符是否匹配</li><li>验证变量占位符（$1, $2 等）</li><li>测试代码片段是否正常工作</li></ul><h3 id="_5-ai-功能使用" tabindex="-1">5. AI 功能使用 <a class="header-anchor" href="#_5-ai-功能使用" aria-label="Permalink to &quot;5. AI 功能使用&quot;">​</a></h3><p>Cursor 的主要特色是其内置的 AI 功能：</p><ul><li>智能代码补全</li><li>代码解释和文档生成</li><li>Bug 修复建议</li><li>代码重构辅助</li><li>自然语言交互</li></ul><h3 id="_6-常用快捷键" tabindex="-1">6. 常用快捷键 <a class="header-anchor" href="#_6-常用快捷键" aria-label="Permalink to &quot;6. 常用快捷键&quot;">​</a></h3><table tabindex="0"><thead><tr><th>功能</th><th>Windows/Linux</th><th>macOS</th></tr></thead><tbody><tr><td>命令面板</td><td>Ctrl + Shift + P</td><td>Cmd + Shift + P</td></tr><tr><td>AI 助手</td><td>Ctrl + K</td><td>Cmd + K</td></tr><tr><td>快速打开文件</td><td>Ctrl + P</td><td>Cmd + P</td></tr><tr><td>转到定义</td><td>F12</td><td>F12</td></tr><tr><td>查找引用</td><td>Shift + F12</td><td>Shift + F12</td></tr></tbody></table><h2 id="使用技巧" tabindex="-1">使用技巧 <a class="header-anchor" href="#使用技巧" aria-label="Permalink to &quot;使用技巧&quot;">​</a></h2><h3 id="_1-ai-助手最佳实践" tabindex="-1">1. AI 助手最佳实践 <a class="header-anchor" href="#_1-ai-助手最佳实践" aria-label="Permalink to &quot;1. AI 助手最佳实践&quot;">​</a></h3><ul><li>使用清晰具体的提示语</li><li>善用上下文相关的代码生成</li><li>利用 AI 进行代码审查</li><li>请求代码优化建议</li></ul><h3 id="_2-工作流优化" tabindex="-1">2. 工作流优化 <a class="header-anchor" href="#_2-工作流优化" aria-label="Permalink to &quot;2. 工作流优化&quot;">​</a></h3><ul><li>使用工作区</li><li>配置 Git 集成</li><li>自定义代码片段</li><li>利用智能提示</li></ul><h2 id="常见问题解决" tabindex="-1">常见问题解决 <a class="header-anchor" href="#常见问题解决" aria-label="Permalink to &quot;常见问题解决&quot;">​</a></h2><h3 id="_1-性能优化" tabindex="-1">1. 性能优化 <a class="header-anchor" href="#_1-性能优化" aria-label="Permalink to &quot;1. 性能优化&quot;">​</a></h3><ul><li>定期清理缓存</li><li>关闭不需要的插件</li><li>适当调整内存使用</li></ul><h3 id="_2-兼容性问题" tabindex="-1">2. 兼容性问题 <a class="header-anchor" href="#_2-兼容性问题" aria-label="Permalink to &quot;2. 兼容性问题&quot;">​</a></h3><ul><li>检查插件版本</li><li>更新到最新版本</li><li>查看官方文档</li></ul><h2 id="结论" tabindex="-1">结论 <a class="header-anchor" href="#结论" aria-label="Permalink to &quot;结论&quot;">​</a></h2><p>Cursor 作为 VS Code 的升级版本，不仅保留了 VS Code 的优秀特性，还加入了强大的 AI 功能。通过合理使用这些新特性，可以显著提升开发效率。</p><h2 id="相关资源" tabindex="-1">相关资源 <a class="header-anchor" href="#相关资源" aria-label="Permalink to &quot;相关资源&quot;">​</a></h2><ul><li><a href="https://cursor.sh/docs" target="_blank" rel="noreferrer">Cursor 官方文档</a></li><li><a href="https://github.com/getcursor/cursor" target="_blank" rel="noreferrer">Cursor GitHub</a></li><li><a href="https://cursor.sh/docs/migration" target="_blank" rel="noreferrer">VS Code 到 Cursor 迁移指南</a></li></ul>',42)])])}]]);export{n as __pageData,e as default};
